name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
# on: [push, pull_request]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
on:
  pull_request:
      branches:
        - master
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.pyver }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        pyver: ['cp39', 'cp310', 'cp311', 'cp312']
    steps:
      - uses: actions/checkout@v4

      - name: Setup Miniconda
        if: runner.os == 'Windows'
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: openblas
          auto-activate-base: false
          channels: conda-forge

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_BUILD: ${{matrix.pyver}}-*
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_ARCHS: auto64
          CIBW_ARCHS_MACOS: x86_64

          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair -w {dest_dir} {wheel} --add-path C:\Miniconda\envs\openblas\Library\lib\bin
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: MACOSX_DEPLOYMENT_TARGET=13.0 DYLD_LIBRARY_PATH=/usr/local/lib/ delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}

          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel && conda install openblas libopenblas[openmp]
          CIBW_BEFORE_BUILD_LINUX: dnf install openblas-devel -y
          CIBW_BEFORE_BUILD_MACOS: >
                                    brew install openblas libomp &&
                                    export PKG_CONFIG_PATH="/usr/local/opt/openblas/lib/pkgconfig"
                                    # export LDFLAGS="-L/usr/local/opt/openblas/lib" &&
                                    # export CPPFLAGS="-I/usr/local/opt/openblas/include"
                                    # bash tools/cibw_before_build_macos.sh

          CIBW_TEST_EXTRAS: "test"
          CIBW_TEST_COMMAND: python {package}/test/test_spams.py

      - name: Test against oldest supported numpy version
        if: ${{ matrix.pyver == 'cp310' }}
        shell: bash
        run: |
            ls ./wheelhouse
            python -m pip install ./wheelhouse/*${{matrix.pyver}}*.whl
            python -m pip install numpy==1.21.3 scipy==1.8
            python ./test/test_spams.py

      - uses: actions/upload-artifact@v4
        with:
          name: pywheels-${{ matrix.os }}-${{ matrix.pyver }}
          path: ./wheelhouse/*.whl


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: pysource
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist
          pattern: py*
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          user: __token__
          password: ${{ secrets.pypi_password }}
          # password: ${{ secrets.testpypi_password }}
          # repository_url: https://test.pypi.org/legacy/
