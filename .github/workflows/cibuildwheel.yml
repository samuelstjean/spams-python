name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
# on: [push, pull_request]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
on:
  push:
  pull_request:
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==1.10.0

      - name: Build wheels
        env:
          CIBW_SKIP: "*-manylinux_i686 pp* cp27-* cp35-*"

          # CIBW_BEFORE_BUILD_WINDOWS: "conda install openblas lapack -y && pip install delvewheel"
          CIBW_BEFORE_BUILD_LINUX: yum install openblas-devel lapack-devel -y
          CIBW_BEFORE_BUILD_MACOS: brew install openblas
          
          # CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"

          CIBW_TEST_COMMAND: python {package}/test/test_spams.py
          # CIBW_TEST_COMMAND_WINDOWS: '' # Because it requires the mkl dll, seems like we can't run it since it gets separated when testing from the build env :/
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
          
  build_wheels_windows:
      name: Build wheels on windows Python-${{ matrix.python-version }} ${{ matrix.arch }}
      runs-on: windows-latest
      strategy:
        matrix:
          arch: [x64] 
          python-version: [3.7, 3.8, 3.9]
      steps:
        - uses: actions/checkout@v2

        - uses: conda-incubator/setup-miniconda@v2
          if: matrix.arch == 'x64'
          with:

            auto-update-conda: true
            python-version: ${{ matrix.python-version }}
            miniconda-version: "latest"

        - name: Install Deps
          run: conda install mkl mkl-include mkl-devel -y && pip install -U setuptools wheel pip
        - name: Build Wheel
          run: python setup.py bdist_wheel
        - name: Repair Wheel
          shell: bash
          run: |
            set -e
            pip install delvewheel
            delvewheel repair dist/*whl
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
            architecture: ${{ matrix.arch }}
        - name: Run tests
          shell: bash
          run: |
            set -e
            which python
            pip install wheelhouse/*whl
            pip install pytest
            pytest
        - uses: actions/upload-artifact@v2
          with:
            path: ./dist/*.whl
          
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build sdist
        run: |
          python -m pip install numpy distro
          python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # password: ${{ secrets.testpypi_password }}
          # repository_url: https://test.pypi.org/legacy/
