/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040100
#define SWIGPYTHON
#define SWIG_PYTHON_THREADS
#define SWIGPYTHON_BUILTIN
#define SWIGPYTHON_FASTPROXY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN Py_hash_t
SwigPyObject_hash(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  void *ptr = sobj->ptr;
#if PY_VERSION_HEX < 0x03020000
  return (Py_hash_t)(Py_ssize_t)ptr;
#else
  return (Py_hash_t)ptr;
#endif
}

SWIGINTERN Py_hash_t
SWIG_PyNumber_AsPyHash(PyObject *obj) {
  Py_hash_t result = -1;
#if PY_VERSION_HEX < 0x03020000
  if (PyInt_Check(obj))
    result = PyInt_AsLong(obj);
  else if (PyLong_Check(obj))
    result = PyLong_AsLong(obj);
#else
  if (PyNumber_Check(obj))
    result = PyNumber_AsSsize_t(obj, NULL);
#endif
  else
    PyErr_Format(PyExc_TypeError, "Wrong type for hash function");
  return PyErr_Occurred() ? -1 : result;
}

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", obj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(val);
  PyTuple_SET_ITEM(tuple, 0, val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  PyObject_GC_UnTrack(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyObject *typeobject, PyObject *name, PyObject *value) {
  PyObject *attribute;
  PyTypeObject *type;
  descrsetfunc local_set;

  assert(PyType_Check(typeobject));
  type = (PyTypeObject *)typeobject;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "swig_static_var_getset_descriptor",      /* tp_name */
      sizeof(PyGetSetDescrObject),              /* tp_basicsize */
      0,                                        /* tp_itemsize */
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
  }
  return &staticvar_type;
}

SWIGINTERN PyTypeObject*
SwigPyObjectType(void) {
  static char swigpyobjecttype_doc[] = "Metaclass for SWIG wrapped types";
  static PyTypeObject swigpyobjecttype_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "SwigPyObjectType",                       /* tp_name */
      PyType_Type.tp_basicsize,                 /* tp_basicsize */
      0,                                        /* tp_itemsize */
      0,                                        /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      0,                                        /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      0,                                        /* tp_getattro */
      SwigPyObjectType_setattro,                /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      swigpyobjecttype_doc,                     /* tp_doc */
      0,                                        /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      0,                                        /* tp_descr_get */
      0,                                        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    swigpyobjecttype_type = tmp;
    type_init = 1;
    swigpyobjecttype_type.tp_base = &PyType_Type;
    if (PyType_Ready(&swigpyobjecttype_type) < 0)
      return NULL;
  }
  return &swigpyobjecttype_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  Py_ssize_t base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  Py_ssize_t i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    Py_INCREF((PyObject *)bases[i]);
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x030900a4
    Py_SET_TYPE(type, metatype);
#else
    Py_TYPE(type) = metatype;
#endif
}


/* Start of callback function macros for use in PyTypeObject */

typedef PyObject *(*SwigPyWrapperFunction)(PyObject *, PyObject *);

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_unaryfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_unaryfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_unaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)			\
SWIGINTERN void							\
wrapper##_destructor_closure(PyObject *a) {			\
    SwigPyBuiltin_destructor_closure(wrapper, #wrapper, a);	\
}
SWIGINTERN void
SwigPyBuiltin_destructor_closure(SwigPyWrapperFunction wrapper, const char *wrappername, PyObject *a) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)a;
  Py_XDECREF(sobj->dict);
  if (sobj->own) {
    PyObject *o;
    PyObject *type = 0, *value = 0, *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    o = wrapper(a, NULL);
    if (!o) {
      PyObject *deallocname = PyString_FromString(wrappername);
      PyErr_WriteUnraisable(deallocname);
      Py_DECREF(deallocname);
    }
    PyErr_Restore(type, value, traceback);
    Py_XDECREF(o);
  }
  if (PyType_IS_GC(a->ob_type)) {
    PyObject_GC_Del(a);
  } else {
    PyObject_Del(a);
  }
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)			\
SWIGINTERN int						\
wrapper##_inquiry_closure(PyObject *a) {		\
  return SwigPyBuiltin_inquiry_closure(wrapper, a);	\
}
SWIGINTERN int
SwigPyBuiltin_inquiry_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  int result;
  pyresult = wrapper(a, NULL);
  result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_GETITERFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_getiterfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_getiterfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_getiterfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_binaryfunc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_binaryfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_binaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ternaryfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternaryfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  Py_INCREF(c);
  PyTuple_SET_ITEM(tuple, 1, c);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)					\
SWIGINTERN PyObject *								\
wrapper##_ternarycallfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternarycallfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternarycallfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  (void) c;
  return wrapper(a, b);
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_lenfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_lenfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_ssize_t
SwigPyBuiltin_lenfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *resultobj;
  Py_ssize_t result;
  resultobj = wrapper(a, NULL);
  result = PyNumber_AsSsize_t(resultobj, NULL);
  Py_DECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *								\
wrapper##_ssizessizeargfunc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
  return SwigPyBuiltin_ssizessizeargfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizessizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)						\
SWIGINTERN int											\
wrapper##_ssizessizeobjargproc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {	\
  return SwigPyBuiltin_ssizessizeobjargproc_closure(wrapper, a, b, c, d);			\
}
SWIGINTERN int
SwigPyBuiltin_ssizessizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(d ? 3 : 2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  if (d) {
    Py_INCREF(d);
    PyTuple_SET_ITEM(tuple, 2, d);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_DECREF(tuple);
  Py_XDECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_funpack_ssizeargfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_funpack_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_ssizeargfunc_closure(wrapper, a, b);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *arg, *result;
  arg = _PyLong_FromSsize_t(b);
  result = wrapper(a, arg);
  Py_DECREF(arg);
  return result;
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_ssizeobjargproc_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
  return SwigPyBuiltin_ssizeobjargproc_closure(wrapper, a, b, c);		\
}
SWIGINTERN int
SwigPyBuiltin_ssizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  Py_INCREF(c);
  PyTuple_SET_ITEM(tuple, 1, c);
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  PyObject *tuple;
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  pyresult = wrapper(a, tuple);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  Py_XDECREF(pyresult);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {		\
  return SwigPyBuiltin_funpack_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_funpack_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  pyresult = wrapper(a, b);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_objobjargproc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_objobjargproc_closure(wrapper, a, b, c);			\
}
SWIGINTERN int
SwigPyBuiltin_objobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(c ? 2 : 1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  if (c) {
    Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_reprfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_reprfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_reprfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)		\
SWIGINTERN Py_hash_t					\
wrapper##_hashfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_hashfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_hash_t
SwigPyBuiltin_hashfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  Py_hash_t result;
  pyresult = wrapper(a, NULL);
  if (!pyresult)
    return -1;
  result = SWIG_PyNumber_AsPyHash(pyresult);
  Py_DECREF(pyresult);
  return result;
}

#define SWIGPY_ITERNEXTFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_iternextfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_iternextfunc_closure(wrapper, a);\
}
SWIGINTERN PyObject *
SwigPyBuiltin_iternextfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

/* End of callback function macros for use in PyTypeObject */

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_SwigPyObject swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_int swig_types[2]
#define SWIGTYPE_p_p_SpMatrixT_bool_t swig_types[3]
#define SWIGTYPE_p_p_SpMatrixT_double_t swig_types[4]
#define SWIGTYPE_p_p_SpMatrixT_float_t swig_types[5]
#define SWIGTYPE_p_p_VectorT_float_t swig_types[6]
#define SWIGTYPE_p_p_int swig_types[7]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[8]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[9]
#define SWIGTYPE_p_string swig_types[10]
static swig_type_info *swig_types[12];
static swig_module_info swig_module = {swig_types, 11, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _spams_wrap.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__spams_wrap

#else
#  define SWIG_init    init_spams_wrap

#endif
#define SWIG_name    "_spams_wrap"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


#define SWIG_FILE_WITH_INIT

#include "spams.h"
#include "spams/prox/groups-graph.h"

#ifdef DEBUG
#include "spams-tst.h"
#endif


#ifndef SWIG_FILE_WITH_INIT
#  define NO_IMPORT_ARRAY
#endif
#include <stdio.h>
//#include "spams.h"
#undef _POSIX_C_SOURCE
extern "C" {
#include <Python.h>
#include <numpy/arrayobject.h>
}
#define check_array(a,npy_type) (!is_array(a) || !require_contiguous(a) || !require_dimensions(a,1) || !require_native(a) || array_type(a)!=npy_type)


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#if NPY_API_VERSION < NPY_1_7_API_VERSION
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < NPY_1_7_API_VERSION
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_clearflags(a,f)  (((PyArrayObject*)a)->flags) &= ~f
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#define array_clearflags(a,f)  PyArray_CLEARFLAGS((PyArrayObject*)a,f)
#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyBytes_Check(   py_obj)) return "string"      ;
    if (PyLong_Check(    py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;

    return "unknown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
#if NPY_API_VERSION < NPY_1_7_API_VERSION
                                                  NPY_FORTRANORDER);
#else
                                                  NPY_ARRAY_F_CONTIGUOUS);
#endif
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Test whether a python object is (C_ or F_) contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_c_or_f_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    size_t len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    int n_non_one = 0;
    /* Set the Fortran ordered flag */
    const npy_intp *dims = array_dimensions(ary);
    for (i=0; i < nd; ++i)
      n_non_one += (dims[i] != 1) ? 1 : 0;
    if (n_non_one > 1)
      array_clearflags(ary,NPY_ARRAY_CARRAY);
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }




SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


   const int check_sparse(PyObject* input) {
    return (PyObject_HasAttrString(input, "indptr") &&
        PyObject_HasAttrString(input, "indices") &&
        PyObject_HasAttrString(input, "data") &&
        PyObject_HasAttrString(input, "shape")
        ) ? 1 : 0;
  }
  const int check_matrix(PyObject* input,int data_typecode) {
   return (is_array(input) && (array_numdims(input) == 2) && PyArray_EquivTypenums(array_type(input),data_typecode));
  }

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_m_ones(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "m_ones" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int *)m_ones(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_skip_space(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "skip_space" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)skip_space(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_line(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "parse_line", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_line" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_line" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_line" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)parse_line(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intlist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  string arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_string,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intlist" "', argument " "1"" of type '" "string""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intlist" "', argument " "1"" of type '" "string""'");
    } else {
      string * temp = reinterpret_cast< string * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector< int > *)intlist(SWIG_STD_MOVE(arg1));
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sort__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Vector< double > *arg1 = (Vector< double > *) 0 ;
  bool arg2 ;
  PyArrayObject *array1 = NULL ;
  bool val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (!array1 || !require_dimensions(array1,1) || !require_contiguous(array1) || !require_native(array1)) SWIG_fail;
    arg1 = new Vector<double> ((double *)array_data(array1),(int)array_size(array1,0));
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sort" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _sort< double >(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_sort__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Vector< float > *arg1 = (Vector< float > *) 0 ;
  bool arg2 ;
  PyArrayObject *array1 = NULL ;
  bool val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    if (!array1 || !require_dimensions(array1,1) || !require_contiguous(array1) || !require_native(array1)) SWIG_fail;
    arg1 = new Vector<float> ((float *)array_data(array1),(int)array_size(array1,0));
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sort" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _sort< float >(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_sort(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "sort", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 1) && PyArray_EquivTypenums(array_type(argv[0]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_sort__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_sort__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'sort'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _sort< double >(Vector< double > *,bool)\n"
    "    _sort< float >(Vector< float > *,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mult__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< double > *arg3 = (Matrix< double > *) 0 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  double arg7 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<double> ((double *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mult" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mult" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mult" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "mult" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _mult< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mult__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< float > *arg3 = (Matrix< float > *) 0 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  float arg7 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  (void)self;
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<float> ((float *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mult" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mult" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mult" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "mult" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _mult< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mult(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "mult", 0, 7, argv))) SWIG_fail;
  --argc;
  if (argc == 7) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 2) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[5], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[6], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_mult__SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 7) {
    PyObject *retobj = _wrap_mult__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'mult'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _mult< double >(Matrix< double > *,Matrix< double > *,Matrix< double > *,bool const,bool const,double const,double const)\n"
    "    _mult< float >(Matrix< float > *,Matrix< float > *,Matrix< float > *,bool const,bool const,float const,float const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AAt__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpMatrix< double > *arg1 = (SpMatrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  PyObject *sparray1 = NULL ;
  PyArrayObject *array2 = NULL ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray1 = swig_obj[0];
    if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
        PyObject_HasAttrString(sparray1, "indices") &&
        PyObject_HasAttrString(sparray1, "data") &&
        PyObject_HasAttrString(sparray1, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray1, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray1, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray1, "data");
    PyObject* shape = PyObject_GetAttrString(sparray1, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_DOUBLE)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg1 = new SpMatrix<double> ((double *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _AAt< double >(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_AAt__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpMatrix< float > *arg1 = (SpMatrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  PyObject *sparray1 = NULL ;
  PyArrayObject *array2 = NULL ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray1 = swig_obj[0];
    if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
        PyObject_HasAttrString(sparray1, "indices") &&
        PyObject_HasAttrString(sparray1, "data") &&
        PyObject_HasAttrString(sparray1, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray1, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray1, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray1, "data");
    PyObject* shape = PyObject_GetAttrString(sparray1, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_FLOAT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg1 = new SpMatrix<float> ((float *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _AAt< float >(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_AAt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "AAt", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    return _wrap_AAt__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_AAt__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AAt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _AAt< double >(SpMatrix< double > *,Matrix< double > *)\n"
    "    _AAt< float >(SpMatrix< float > *,Matrix< float > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XAt__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpMatrix< double > *arg1 = (SpMatrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< double > *arg3 = (Matrix< double > *) 0 ;
  PyObject *sparray1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray1 = swig_obj[0];
    if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
        PyObject_HasAttrString(sparray1, "indices") &&
        PyObject_HasAttrString(sparray1, "data") &&
        PyObject_HasAttrString(sparray1, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray1, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray1, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray1, "data");
    PyObject* shape = PyObject_GetAttrString(sparray1, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_DOUBLE)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg1 = new SpMatrix<double> ((double *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<double> ((double *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _XAt< double >(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_XAt__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpMatrix< float > *arg1 = (SpMatrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< float > *arg3 = (Matrix< float > *) 0 ;
  PyObject *sparray1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray1 = swig_obj[0];
    if ( !( PyObject_HasAttrString(sparray1, "indptr") &&
        PyObject_HasAttrString(sparray1, "indices") &&
        PyObject_HasAttrString(sparray1, "data") &&
        PyObject_HasAttrString(sparray1, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray1, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray1, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray1, "data");
    PyObject* shape = PyObject_GetAttrString(sparray1, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_FLOAT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg1: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg1 = new SpMatrix<float> ((float *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<float> ((float *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _XAt< float >(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_XAt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "XAt", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 2) && PyArray_EquivTypenums(array_type(argv[2]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    return _wrap_XAt__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_XAt__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'XAt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _XAt< double >(SpMatrix< double > *,Matrix< double > *,Matrix< double > *)\n"
    "    _XAt< float >(SpMatrix< float > *,Matrix< float > *,Matrix< float > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_applyBayerPattern__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Vector< double > *arg1 = (Vector< double > *) 0 ;
  int arg2 ;
  PyArrayObject *array1 = NULL ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (!array1 || !require_dimensions(array1,1) || !require_contiguous(array1) || !require_native(array1)) SWIG_fail;
    arg1 = new Vector<double> ((double *)array_data(array1),(int)array_size(array1,0));
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "applyBayerPattern" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _applyBayerPattern< double >(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_applyBayerPattern__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Vector< float > *arg1 = (Vector< float > *) 0 ;
  int arg2 ;
  PyArrayObject *array1 = NULL ;
  int val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    if (!array1 || !require_dimensions(array1,1) || !require_contiguous(array1) || !require_native(array1)) SWIG_fail;
    arg1 = new Vector<float> ((float *)array_data(array1),(int)array_size(array1,0));
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "applyBayerPattern" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _applyBayerPattern< float >(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_applyBayerPattern(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "applyBayerPattern", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 1) && PyArray_EquivTypenums(array_type(argv[0]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_applyBayerPattern__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_applyBayerPattern__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'applyBayerPattern'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _applyBayerPattern< double >(Vector< double > *,int)\n"
    "    _applyBayerPattern< float >(Vector< float > *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conjugateGradient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Vector< double > *arg2 = (Vector< double > *) 0 ;
  Vector< double > *arg3 = (Vector< double > *) 0 ;
  double arg4 ;
  int arg5 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = new Vector<double> ((double *)array_data(array2),(int)array_size(array2,0));
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<double> ((double *)array_data(array3),(int)array_size(array3,0));
  }
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "conjugateGradient" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "conjugateGradient" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _conjugateGradient< double >(arg1,arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_conjugateGradient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Vector< float > *arg2 = (Vector< float > *) 0 ;
  Vector< float > *arg3 = (Vector< float > *) 0 ;
  float arg4 ;
  int arg5 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    if (!array2 || !require_dimensions(array2,1) || !require_contiguous(array2) || !require_native(array2)) SWIG_fail;
    arg2 = new Vector<float> ((float *)array_data(array2),(int)array_size(array2,0));
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<float> ((float *)array_data(array3),(int)array_size(array3,0));
  }
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "conjugateGradient" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "conjugateGradient" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _conjugateGradient< float >(arg1,arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_conjugateGradient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "conjugateGradient", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 1) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 1) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[3], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_conjugateGradient__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 5) {
    PyObject *retobj = _wrap_conjugateGradient__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'conjugateGradient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _conjugateGradient< double >(Matrix< double > *,Vector< double > *,Vector< double > *,double const,int const)\n"
    "    _conjugateGradient< float >(Matrix< float > *,Vector< float > *,Vector< float > *,float const,int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_invSym__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  PyArrayObject *array1 = NULL ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    _invSym< double >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_invSym__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  PyArrayObject *array1 = NULL ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    _invSym< float >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_invSym(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "invSym", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    return _wrap_invSym__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_invSym__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'invSym'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _invSym< double >(Matrix< double > *)\n"
    "    _invSym< float >(Matrix< float > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_normalize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  PyArrayObject *array1 = NULL ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    _normalize< double >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  PyArrayObject *array1 = NULL ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    _normalize< float >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "normalize", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    return _wrap_normalize__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_normalize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'normalize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _normalize< double >(Matrix< double > *)\n"
    "    _normalize< float >(Matrix< float > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sparseProject__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  double arg3 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  bool arg8 ;
  int arg9 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sparseProject" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sparseProject" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sparseProject" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "sparseProject" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "sparseProject" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_bool(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "sparseProject" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "sparseProject" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _sparseProject< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_sparseProject__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  int arg9 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sparseProject" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sparseProject" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sparseProject" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "sparseProject" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "sparseProject" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_bool(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "sparseProject" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "sparseProject" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _sparseProject< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_sparseProject(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "sparseProject", 0, 9, argv))) SWIG_fail;
  --argc;
  if (argc == 9) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[4], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[5], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[6], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_sparseProject__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 9) {
    PyObject *retobj = _wrap_sparseProject__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'sparseProject'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _sparseProject< double >(Matrix< double > *,Matrix< double > *,double const,int const,double const,double const,double const,bool const,int const)\n"
    "    _sparseProject< float >(Matrix< float > *,Matrix< float > *,float const,int const,float const,float const,float const,bool const,int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lassoD__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< double > **arg3 = (Matrix< double > **) 0 ;
  bool arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  constraint_type arg8 ;
  bool arg9 ;
  bool arg10 ;
  int arg11 ;
  int arg12 ;
  bool arg13 ;
  bool arg14 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  Matrix< double > *data_temp3 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  bool val13 ;
  int ecode13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  (void)self;
  if ((nobjs < 13) || (nobjs > 13)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lassoD" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lassoD" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "lassoD" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lassoD" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lassoD" "', argument " "8"" of type '" "constraint_type""'");
  } 
  arg8 = static_cast< constraint_type >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lassoD" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "lassoD" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_int(swig_obj[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "lassoD" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  ecode12 = SWIG_AsVal_int(swig_obj[10], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "lassoD" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  ecode13 = SWIG_AsVal_bool(swig_obj[11], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "lassoD" "', argument " "13"" of type '" "bool""'");
  } 
  arg13 = static_cast< bool >(val13);
  ecode14 = SWIG_AsVal_bool(swig_obj[12], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "lassoD" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_lassoD< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp dims[2] = {
        m,n
      };
      double *data = data_temp3->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lassoD__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< float > **arg3 = (Matrix< float > **) 0 ;
  bool arg4 ;
  int arg5 ;
  float arg6 ;
  float arg7 ;
  constraint_type arg8 ;
  bool arg9 ;
  bool arg10 ;
  int arg11 ;
  int arg12 ;
  bool arg13 ;
  bool arg14 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  Matrix< float > *data_temp3 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  bool val13 ;
  int ecode13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  (void)self;
  if ((nobjs < 13) || (nobjs > 13)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lassoD" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lassoD" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "lassoD" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lassoD" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lassoD" "', argument " "8"" of type '" "constraint_type""'");
  } 
  arg8 = static_cast< constraint_type >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lassoD" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "lassoD" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_int(swig_obj[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "lassoD" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  ecode12 = SWIG_AsVal_int(swig_obj[10], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "lassoD" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  ecode13 = SWIG_AsVal_bool(swig_obj[11], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "lassoD" "', argument " "13"" of type '" "bool""'");
  } 
  arg13 = static_cast< bool >(val13);
  ecode14 = SWIG_AsVal_bool(swig_obj[12], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "lassoD" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_lassoD< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp dims[2] = {
        m,n
      };
      float *data = data_temp3->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_FLOAT,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lassoD(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[14] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "lassoD", 0, 13, argv))) SWIG_fail;
  --argc;
  if (argc == 13) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[4], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[5], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_lassoD__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 13) {
    PyObject *retobj = _wrap_lassoD__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lassoD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _lassoD< double >(Matrix< double > *,Matrix< double > *,Matrix< double > **,bool,int,double const,double const,constraint_type,bool const,bool const,int const,int,bool const,bool)\n"
    "    _lassoD< float >(Matrix< float > *,Matrix< float > *,Matrix< float > **,bool,int,float const,float const,constraint_type,bool const,bool const,int const,int,bool const,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lassoQq__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< double > *arg3 = (Matrix< double > *) 0 ;
  Matrix< double > **arg4 = (Matrix< double > **) 0 ;
  bool arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  constraint_type arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  Matrix< double > *data_temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  bool val15 ;
  int ecode15 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  {
    arg4 = &data_temp4;
  }
  (void)self;
  if ((nobjs < 14) || (nobjs > 14)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<double> ((double *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lassoQq" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "lassoQq" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lassoQq" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lassoQq" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lassoQq" "', argument " "9"" of type '" "constraint_type""'");
  } 
  arg9 = static_cast< constraint_type >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "lassoQq" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "lassoQq" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_int(swig_obj[10], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "lassoQq" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  ecode13 = SWIG_AsVal_int(swig_obj[11], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "lassoQq" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  ecode14 = SWIG_AsVal_bool(swig_obj[12], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "lassoQq" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  ecode15 = SWIG_AsVal_bool(swig_obj[13], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "lassoQq" "', argument " "15"" of type '" "bool""'");
  } 
  arg15 = static_cast< bool >(val15);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_lassoQq< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp dims[2] = {
        m,n
      };
      double *data = data_temp4->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lassoQq__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< float > *arg3 = (Matrix< float > *) 0 ;
  Matrix< float > **arg4 = (Matrix< float > **) 0 ;
  bool arg5 ;
  int arg6 ;
  float arg7 ;
  float arg8 ;
  constraint_type arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int arg13 ;
  bool arg14 ;
  bool arg15 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  Matrix< float > *data_temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  bool val15 ;
  int ecode15 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  {
    arg4 = &data_temp4;
  }
  (void)self;
  if ((nobjs < 14) || (nobjs > 14)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<float> ((float *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lassoQq" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "lassoQq" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lassoQq" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(swig_obj[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lassoQq" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lassoQq" "', argument " "9"" of type '" "constraint_type""'");
  } 
  arg9 = static_cast< constraint_type >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "lassoQq" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "lassoQq" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_int(swig_obj[10], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "lassoQq" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  ecode13 = SWIG_AsVal_int(swig_obj[11], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "lassoQq" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  ecode14 = SWIG_AsVal_bool(swig_obj[12], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "lassoQq" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  ecode15 = SWIG_AsVal_bool(swig_obj[13], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "lassoQq" "', argument " "15"" of type '" "bool""'");
  } 
  arg15 = static_cast< bool >(val15);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_lassoQq< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp dims[2] = {
        m,n
      };
      float *data = data_temp4->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_FLOAT,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lassoQq(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[15] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "lassoQq", 0, 14, argv))) SWIG_fail;
  --argc;
  if (argc == 14) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 2) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[5], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[6], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_lassoQq__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 14) {
    PyObject *retobj = _wrap_lassoQq__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lassoQq'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _lassoQq< double >(Matrix< double > *,Matrix< double > *,Matrix< double > *,Matrix< double > **,bool,int,double const,double const,constraint_type,bool const,bool const,int const,int,bool const,bool)\n"
    "    _lassoQq< float >(Matrix< float > *,Matrix< float > *,Matrix< float > *,Matrix< float > **,bool,int,float const,float const,constraint_type,bool const,bool const,int const,int,bool const,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lassoMask__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< bool > *arg3 = (Matrix< bool > *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  constraint_type arg7 ;
  bool arg8 ;
  int arg9 ;
  bool arg10 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 10) || (nobjs > 10)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_BOOL);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d bool Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<bool> ((bool *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lassoMask" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lassoMask" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "lassoMask" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lassoMask" "', argument " "7"" of type '" "constraint_type""'");
  } 
  arg7 = static_cast< constraint_type >(val7);
  ecode8 = SWIG_AsVal_bool(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lassoMask" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lassoMask" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "lassoMask" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_lassoMask< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lassoMask__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< bool > *arg3 = (Matrix< bool > *) 0 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  constraint_type arg7 ;
  bool arg8 ;
  int arg9 ;
  bool arg10 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 10) || (nobjs > 10)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_BOOL);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d bool Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<bool> ((bool *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lassoMask" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lassoMask" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "lassoMask" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lassoMask" "', argument " "7"" of type '" "constraint_type""'");
  } 
  arg7 = static_cast< constraint_type >(val7);
  ecode8 = SWIG_AsVal_bool(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lassoMask" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lassoMask" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "lassoMask" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_lassoMask< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lassoMask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "lassoMask", 0, 10, argv))) SWIG_fail;
  --argc;
  if (argc == 10) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[4], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[5], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_lassoMask__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 10) {
    PyObject *retobj = _wrap_lassoMask__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lassoMask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _lassoMask< double >(Matrix< double > *,Matrix< double > *,Matrix< bool > *,int,double const,double const,constraint_type,bool const,int const,bool)\n"
    "    _lassoMask< float >(Matrix< float > *,Matrix< float > *,Matrix< bool > *,int,float const,float const,constraint_type,bool const,int const,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< double > *arg3 = (Matrix< double > *) 0 ;
  int arg4 ;
  double arg5 ;
  constraint_type arg6 ;
  bool arg7 ;
  int arg8 ;
  bool arg9 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<double> ((double *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lassoWeighted" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lassoWeighted" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "lassoWeighted" "', argument " "6"" of type '" "constraint_type""'");
  } 
  arg6 = static_cast< constraint_type >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lassoWeighted" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lassoWeighted" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lassoWeighted" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_lassoWeighted< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lassoWeighted__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< float > *arg3 = (Matrix< float > *) 0 ;
  int arg4 ;
  float arg5 ;
  constraint_type arg6 ;
  bool arg7 ;
  int arg8 ;
  bool arg9 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<float> ((float *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lassoWeighted" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lassoWeighted" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "lassoWeighted" "', argument " "6"" of type '" "constraint_type""'");
  } 
  arg6 = static_cast< constraint_type >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lassoWeighted" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lassoWeighted" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lassoWeighted" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_lassoWeighted< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_lassoWeighted(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "lassoWeighted", 0, 9, argv))) SWIG_fail;
  --argc;
  if (argc == 9) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 2) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[4], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_lassoWeighted__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 9) {
    PyObject *retobj = _wrap_lassoWeighted__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'lassoWeighted'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _lassoWeighted< double >(Matrix< double > *,Matrix< double > *,Matrix< double > *,int,double const,constraint_type,bool const,int const,bool)\n"
    "    _lassoWeighted< float >(Matrix< float > *,Matrix< float > *,Matrix< float > *,int,float const,constraint_type,bool const,int const,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_omp__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< double > **arg3 = (Matrix< double > **) 0 ;
  bool arg4 ;
  bool arg5 ;
  Vector< int > *arg6 = (Vector< int > *) 0 ;
  bool arg7 ;
  Vector< double > *arg8 = (Vector< double > *) 0 ;
  bool arg9 ;
  Vector< double > *arg10 = (Vector< double > *) 0 ;
  int arg11 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  Matrix< double > *data_temp3 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyArrayObject *array6 = NULL ;
  bool val7 ;
  int ecode7 = 0 ;
  PyArrayObject *array8 = NULL ;
  bool val9 ;
  int ecode9 = 0 ;
  PyArrayObject *array10 = NULL ;
  int val11 ;
  int ecode11 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  (void)self;
  if ((nobjs < 10) || (nobjs > 10)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "omp" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "omp" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    array6 = obj_to_array_no_conversion(swig_obj[4], NPY_INT);
    if (!array6 || !require_dimensions(array6,1) || !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = new Vector<int> ((int *)array_data(array6),(int)array_size(array6,0));
  }
  ecode7 = SWIG_AsVal_bool(swig_obj[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "omp" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    array8 = obj_to_array_no_conversion(swig_obj[6], NPY_DOUBLE);
    if (!array8 || !require_dimensions(array8,1) || !require_contiguous(array8) || !require_native(array8)) SWIG_fail;
    arg8 = new Vector<double> ((double *)array_data(array8),(int)array_size(array8,0));
  }
  ecode9 = SWIG_AsVal_bool(swig_obj[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "omp" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  {
    array10 = obj_to_array_no_conversion(swig_obj[8], NPY_DOUBLE);
    if (!array10 || !require_dimensions(array10,1) || !require_contiguous(array10) || !require_native(array10)) SWIG_fail;
    arg10 = new Vector<double> ((double *)array_data(array10),(int)array_size(array10,0));
  }
  ecode11 = SWIG_AsVal_int(swig_obj[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "omp" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_omp< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp dims[2] = {
        m,n
      };
      double *data = data_temp3->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg6;
  }
  {
    delete arg8;
  }
  {
    delete arg10;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg6;
  }
  {
    delete arg8;
  }
  {
    delete arg10;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_omp__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< float > **arg3 = (Matrix< float > **) 0 ;
  bool arg4 ;
  bool arg5 ;
  Vector< int > *arg6 = (Vector< int > *) 0 ;
  bool arg7 ;
  Vector< float > *arg8 = (Vector< float > *) 0 ;
  bool arg9 ;
  Vector< float > *arg10 = (Vector< float > *) 0 ;
  int arg11 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  Matrix< float > *data_temp3 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyArrayObject *array6 = NULL ;
  bool val7 ;
  int ecode7 = 0 ;
  PyArrayObject *array8 = NULL ;
  bool val9 ;
  int ecode9 = 0 ;
  PyArrayObject *array10 = NULL ;
  int val11 ;
  int ecode11 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  (void)self;
  if ((nobjs < 10) || (nobjs > 10)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "omp" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "omp" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    array6 = obj_to_array_no_conversion(swig_obj[4], NPY_INT);
    if (!array6 || !require_dimensions(array6,1) || !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = new Vector<int> ((int *)array_data(array6),(int)array_size(array6,0));
  }
  ecode7 = SWIG_AsVal_bool(swig_obj[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "omp" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    array8 = obj_to_array_no_conversion(swig_obj[6], NPY_FLOAT);
    if (!array8 || !require_dimensions(array8,1) || !require_contiguous(array8) || !require_native(array8)) SWIG_fail;
    arg8 = new Vector<float> ((float *)array_data(array8),(int)array_size(array8,0));
  }
  ecode9 = SWIG_AsVal_bool(swig_obj[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "omp" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  {
    array10 = obj_to_array_no_conversion(swig_obj[8], NPY_FLOAT);
    if (!array10 || !require_dimensions(array10,1) || !require_contiguous(array10) || !require_native(array10)) SWIG_fail;
    arg10 = new Vector<float> ((float *)array_data(array10),(int)array_size(array10,0));
  }
  ecode11 = SWIG_AsVal_int(swig_obj[9], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "omp" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_omp< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp dims[2] = {
        m,n
      };
      float *data = data_temp3->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_FLOAT,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg6;
  }
  {
    delete arg8;
  }
  {
    delete arg10;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg6;
  }
  {
    delete arg8;
  }
  {
    delete arg10;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_omp(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "omp", 0, 10, argv))) SWIG_fail;
  --argc;
  if (argc == 10) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[6]) && (array_numdims(argv[6]) == 1) && PyArray_EquivTypenums(array_type(argv[6]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[8]) && (array_numdims(argv[8]) == 1) && PyArray_EquivTypenums(array_type(argv[8]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_omp__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 10) {
    PyObject *retobj = _wrap_omp__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'omp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _omp< double >(Matrix< double > *,Matrix< double > *,Matrix< double > **,bool,bool,Vector< int > *,bool,Vector< double > *,bool,Vector< double > *,int const)\n"
    "    _omp< float >(Matrix< float > *,Matrix< float > *,Matrix< float > **,bool,bool,Vector< int > *,bool,Vector< float > *,bool,Vector< float > *,int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ompMask__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< bool > *arg3 = (Matrix< bool > *) 0 ;
  Matrix< double > **arg4 = (Matrix< double > **) 0 ;
  bool arg5 ;
  bool arg6 ;
  Vector< int > *arg7 = (Vector< int > *) 0 ;
  bool arg8 ;
  Vector< double > *arg9 = (Vector< double > *) 0 ;
  bool arg10 ;
  Vector< double > *arg11 = (Vector< double > *) 0 ;
  int arg12 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  Matrix< double > *data_temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyArrayObject *array7 = NULL ;
  bool val8 ;
  int ecode8 = 0 ;
  PyArrayObject *array9 = NULL ;
  bool val10 ;
  int ecode10 = 0 ;
  PyArrayObject *array11 = NULL ;
  int val12 ;
  int ecode12 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  {
    arg4 = &data_temp4;
  }
  (void)self;
  if ((nobjs < 11) || (nobjs > 11)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_BOOL);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d bool Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<bool> ((bool *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ompMask" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ompMask" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    array7 = obj_to_array_no_conversion(swig_obj[5], NPY_INT);
    if (!array7 || !require_dimensions(array7,1) || !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = new Vector<int> ((int *)array_data(array7),(int)array_size(array7,0));
  }
  ecode8 = SWIG_AsVal_bool(swig_obj[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ompMask" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    array9 = obj_to_array_no_conversion(swig_obj[7], NPY_DOUBLE);
    if (!array9 || !require_dimensions(array9,1) || !require_contiguous(array9) || !require_native(array9)) SWIG_fail;
    arg9 = new Vector<double> ((double *)array_data(array9),(int)array_size(array9,0));
  }
  ecode10 = SWIG_AsVal_bool(swig_obj[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ompMask" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  {
    array11 = obj_to_array_no_conversion(swig_obj[9], NPY_DOUBLE);
    if (!array11 || !require_dimensions(array11,1) || !require_contiguous(array11) || !require_native(array11)) SWIG_fail;
    arg11 = new Vector<double> ((double *)array_data(array11),(int)array_size(array11,0));
  }
  ecode12 = SWIG_AsVal_int(swig_obj[10], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ompMask" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_ompMask< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp dims[2] = {
        m,n
      };
      double *data = data_temp4->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg7;
  }
  {
    delete arg9;
  }
  {
    delete arg11;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg7;
  }
  {
    delete arg9;
  }
  {
    delete arg11;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ompMask__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< bool > *arg3 = (Matrix< bool > *) 0 ;
  Matrix< float > **arg4 = (Matrix< float > **) 0 ;
  bool arg5 ;
  bool arg6 ;
  Vector< int > *arg7 = (Vector< int > *) 0 ;
  bool arg8 ;
  Vector< float > *arg9 = (Vector< float > *) 0 ;
  bool arg10 ;
  Vector< float > *arg11 = (Vector< float > *) 0 ;
  int arg12 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  Matrix< float > *data_temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyArrayObject *array7 = NULL ;
  bool val8 ;
  int ecode8 = 0 ;
  PyArrayObject *array9 = NULL ;
  bool val10 ;
  int ecode10 = 0 ;
  PyArrayObject *array11 = NULL ;
  int val12 ;
  int ecode12 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  {
    arg4 = &data_temp4;
  }
  (void)self;
  if ((nobjs < 11) || (nobjs > 11)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_BOOL);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d bool Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<bool> ((bool *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ompMask" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ompMask" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    array7 = obj_to_array_no_conversion(swig_obj[5], NPY_INT);
    if (!array7 || !require_dimensions(array7,1) || !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = new Vector<int> ((int *)array_data(array7),(int)array_size(array7,0));
  }
  ecode8 = SWIG_AsVal_bool(swig_obj[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ompMask" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    array9 = obj_to_array_no_conversion(swig_obj[7], NPY_FLOAT);
    if (!array9 || !require_dimensions(array9,1) || !require_contiguous(array9) || !require_native(array9)) SWIG_fail;
    arg9 = new Vector<float> ((float *)array_data(array9),(int)array_size(array9,0));
  }
  ecode10 = SWIG_AsVal_bool(swig_obj[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ompMask" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  {
    array11 = obj_to_array_no_conversion(swig_obj[9], NPY_FLOAT);
    if (!array11 || !require_dimensions(array11,1) || !require_contiguous(array11) || !require_native(array11)) SWIG_fail;
    arg11 = new Vector<float> ((float *)array_data(array11),(int)array_size(array11,0));
  }
  ecode12 = SWIG_AsVal_int(swig_obj[10], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ompMask" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_ompMask< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp dims[2] = {
        m,n
      };
      float *data = data_temp4->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_FLOAT,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg7;
  }
  {
    delete arg9;
  }
  {
    delete arg11;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg7;
  }
  {
    delete arg9;
  }
  {
    delete arg11;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ompMask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[12] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "ompMask", 0, 11, argv))) SWIG_fail;
  --argc;
  if (argc == 11) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[7]) && (array_numdims(argv[7]) == 1) && PyArray_EquivTypenums(array_type(argv[7]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[9]) && (array_numdims(argv[9]) == 1) && PyArray_EquivTypenums(array_type(argv[9]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_ompMask__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 11) {
    PyObject *retobj = _wrap_ompMask__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ompMask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _ompMask< double >(Matrix< double > *,Matrix< double > *,Matrix< bool > *,Matrix< double > **,bool,bool,Vector< int > *,bool,Vector< double > *,bool,Vector< double > *,int const)\n"
    "    _ompMask< float >(Matrix< float > *,Matrix< float > *,Matrix< bool > *,Matrix< float > **,bool,bool,Vector< int > *,bool,Vector< float > *,bool,Vector< float > *,int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_somp__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Vector< int > *arg3 = (Vector< int > *) 0 ;
  int arg4 ;
  double arg5 ;
  int arg6 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_INT);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<int> ((int *)array_data(array3),(int)array_size(array3,0));
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "somp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "somp" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "somp" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_somp< double >(arg1,arg2,arg3,arg4,arg5,arg6);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_somp__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Vector< int > *arg3 = (Vector< int > *) 0 ;
  int arg4 ;
  float arg5 ;
  int arg6 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_INT);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<int> ((int *)array_data(array3),(int)array_size(array3,0));
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "somp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "somp" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "somp" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_somp< float >(arg1,arg2,arg3,arg4,arg5,arg6);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_somp(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "somp", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 6) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[4], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_somp__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 6) {
    PyObject *retobj = _wrap_somp__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'somp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _somp< double >(Matrix< double > *,Matrix< double > *,Vector< int > *,int,double,int)\n"
    "    _somp< float >(Matrix< float > *,Matrix< float > *,Vector< int > *,int,float,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_cd__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  SpMatrix< double > *arg3 = (SpMatrix< double > *) 0 ;
  double arg4 ;
  constraint_type arg5 ;
  int arg6 ;
  double arg7 ;
  int arg8 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyObject *sparray3 = NULL ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray3 = swig_obj[2];
    if ( !( PyObject_HasAttrString(sparray3, "indptr") &&
        PyObject_HasAttrString(sparray3, "indices") &&
        PyObject_HasAttrString(sparray3, "data") &&
        PyObject_HasAttrString(sparray3, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 3 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray3, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray3, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray3, "data");
    PyObject* shape = PyObject_GetAttrString(sparray3, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg3: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg3: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_DOUBLE)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg3: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg3 = new SpMatrix<double> ((double *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cd" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cd" "', argument " "5"" of type '" "constraint_type""'");
  } 
  arg5 = static_cast< constraint_type >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cd" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cd" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "cd" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_cd< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_cd__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  SpMatrix< float > *arg3 = (SpMatrix< float > *) 0 ;
  float arg4 ;
  constraint_type arg5 ;
  int arg6 ;
  float arg7 ;
  int arg8 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyObject *sparray3 = NULL ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray3 = swig_obj[2];
    if ( !( PyObject_HasAttrString(sparray3, "indptr") &&
        PyObject_HasAttrString(sparray3, "indices") &&
        PyObject_HasAttrString(sparray3, "data") &&
        PyObject_HasAttrString(sparray3, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 3 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray3, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray3, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray3, "data");
    PyObject* shape = PyObject_GetAttrString(sparray3, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg3: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg3: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_FLOAT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg3: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg3 = new SpMatrix<float> ((float *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cd" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cd" "', argument " "5"" of type '" "constraint_type""'");
  } 
  arg5 = static_cast< constraint_type >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cd" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cd" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "cd" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_cd< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_cd(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "cd", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 8) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[3], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[6], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_cd__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 8) {
    PyObject *retobj = _wrap_cd__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'cd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _cd< double >(Matrix< double > *,Matrix< double > *,SpMatrix< double > *,double,constraint_type,int,double,int)\n"
    "    _cd< float >(Matrix< float > *,Matrix< float > *,SpMatrix< float > *,float,constraint_type,int,float,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Matrix< double > *arg3 = (Matrix< double > *) 0 ;
  Vector< int > *arg4 = (Vector< int > *) 0 ;
  double arg5 ;
  constraint_type arg6 ;
  int arg7 ;
  double arg8 ;
  int arg9 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<double> ((double *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  {
    array4 = obj_to_array_no_conversion(swig_obj[3], NPY_INT);
    if (!array4 || !require_dimensions(array4,1) || !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = new Vector<int> ((int *)array_data(array4),(int)array_size(array4,0));
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "l1L2BCD" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "l1L2BCD" "', argument " "6"" of type '" "constraint_type""'");
  } 
  arg6 = static_cast< constraint_type >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "l1L2BCD" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "l1L2BCD" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "l1L2BCD" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _l1L2BCD< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_l1L2BCD__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Matrix< float > *arg3 = (Matrix< float > *) 0 ;
  Vector< int > *arg4 = (Vector< int > *) 0 ;
  float arg5 ;
  constraint_type arg6 ;
  int arg7 ;
  float arg8 ;
  int arg9 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<float> ((float *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  {
    array4 = obj_to_array_no_conversion(swig_obj[3], NPY_INT);
    if (!array4 || !require_dimensions(array4,1) || !require_contiguous(array4) || !require_native(array4)) SWIG_fail;
    arg4 = new Vector<int> ((int *)array_data(array4),(int)array_size(array4,0));
  }
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "l1L2BCD" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "l1L2BCD" "', argument " "6"" of type '" "constraint_type""'");
  } 
  arg6 = static_cast< constraint_type >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "l1L2BCD" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_float(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "l1L2BCD" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "l1L2BCD" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _l1L2BCD< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_l1L2BCD(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "l1L2BCD", 0, 9, argv))) SWIG_fail;
  --argc;
  if (argc == 9) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 2) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[4], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[7], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_l1L2BCD__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 9) {
    PyObject *retobj = _wrap_l1L2BCD__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'l1L2BCD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _l1L2BCD< double >(Matrix< double > *,Matrix< double > *,Matrix< double > *,Vector< int > *,double,constraint_type,int,double,int)\n"
    "    _l1L2BCD< float >(Matrix< float > *,Matrix< float > *,Matrix< float > *,Vector< int > *,float,constraint_type,int,float,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Data< double > *arg1 = (Data< double > *) 0 ;
  bool arg2 ;
  Matrix< double > **arg3 = (Matrix< double > **) 0 ;
  Matrix< double > **arg4 = (Matrix< double > **) 0 ;
  Vector< int > **arg5 = (Vector< int > **) 0 ;
  bool arg6 ;
  Matrix< double > *arg7 = (Matrix< double > *) 0 ;
  Matrix< double > *arg8 = (Matrix< double > *) 0 ;
  int arg9 ;
  Matrix< double > *arg10 = (Matrix< double > *) 0 ;
  Vector< double > *arg11 = (Vector< double > *) 0 ;
  SpMatrix< bool > *arg12 = (SpMatrix< bool > *) 0 ;
  SpMatrix< bool > *arg13 = (SpMatrix< bool > *) 0 ;
  Vector< int > *arg14 = (Vector< int > *) 0 ;
  Vector< int > *arg15 = (Vector< int > *) 0 ;
  int arg16 ;
  double arg17 ;
  bool arg18 ;
  bool arg19 ;
  int arg20 ;
  int arg21 ;
  double arg22 ;
  double arg23 ;
  double arg24 ;
  int arg25 ;
  double arg26 ;
  constraint_type arg27 ;
  char *arg28 = (char *) 0 ;
  bool arg29 ;
  bool arg30 ;
  bool arg31 ;
  constraint_type_D arg32 ;
  bool arg33 ;
  bool arg34 ;
  bool arg35 ;
  double arg36 ;
  double arg37 ;
  double arg38 ;
  int arg39 ;
  bool arg40 ;
  int arg41 ;
  bool arg42 ;
  bool arg43 ;
  char *arg44 = (char *) 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  Matrix< double > *data_temp3 ;
  Matrix< double > *data_temp4 ;
  Vector< int > *data_temp5 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyArrayObject *array7 = NULL ;
  PyArrayObject *array8 = NULL ;
  int val9 ;
  int ecode9 = 0 ;
  PyArrayObject *array10 = NULL ;
  PyArrayObject *array11 = NULL ;
  PyObject *sparray12 = NULL ;
  PyObject *sparray13 = NULL ;
  PyArrayObject *array14 = NULL ;
  PyArrayObject *array15 = NULL ;
  int val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  bool val18 ;
  int ecode18 = 0 ;
  bool val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  int val27 ;
  int ecode27 = 0 ;
  int res28 ;
  char *buf28 = 0 ;
  int alloc28 = 0 ;
  bool val29 ;
  int ecode29 = 0 ;
  bool val30 ;
  int ecode30 = 0 ;
  bool val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  bool val33 ;
  int ecode33 = 0 ;
  bool val34 ;
  int ecode34 = 0 ;
  bool val35 ;
  int ecode35 = 0 ;
  double val36 ;
  int ecode36 = 0 ;
  double val37 ;
  int ecode37 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  int val39 ;
  int ecode39 = 0 ;
  bool val40 ;
  int ecode40 = 0 ;
  int val41 ;
  int ecode41 = 0 ;
  bool val42 ;
  int ecode42 = 0 ;
  bool val43 ;
  int ecode43 = 0 ;
  int res44 ;
  char *buf44 = 0 ;
  int alloc44 = 0 ;
  Matrix< double > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  {
    arg4 = &data_temp4;
  }
  {
    arg5 = &data_temp5;
  }
  (void)self;
  if ((nobjs < 41) || (nobjs > 41)) SWIG_fail;
  {
    if ( PyObject_HasAttrString(swig_obj[0], "indptr")) {
      PyObject* sparray =swig_obj[0];
      /*@SWIG:py_typemaps.i,181,map_sparse@*/
      sparray = swig_obj[0];
      if ( !( PyObject_HasAttrString(sparray, "indptr") &&
          PyObject_HasAttrString(sparray, "indices") &&
          PyObject_HasAttrString(sparray, "data") &&
          PyObject_HasAttrString(sparray, "shape"))) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 : not a column compressed sparse matrix");
        return NULL;
      }
      
      /* fetch sparse attributes */
      PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray, "indptr");
      PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray, "indices");
      PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray, "data");
      PyObject* shape = PyObject_GetAttrString(sparray, "shape");
      
      /* check that types are OK */
      if (check_array(indptr,NPY_INT))
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indptr array should be 1d int's");
        return NULL;
      }
      
      if check_array(indices,NPY_INT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indices array should be 1d int's");
        return NULL;
      }
      
      if check_array(data, NPY_DOUBLE)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg1: data array should be 1d and match datatype");
        return NULL;
      }
      
      if (!PyTuple_Check(shape))
      {
        PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
        return NULL;
      }
      
      /* get array dimensions */
      int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
      int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
      
      
      int *pB = (int *)array_data(indptr);
      int *pE = pB + 1;
      int nzmax = (int)array_size(data,0);
      Py_DECREF(indptr);
      Py_DECREF(indices);
      Py_DECREF(data);
      Py_DECREF(shape);
      
      
      arg1 = new SpMatrix<double> ((double *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
      /*@SWIG@*/
    } else {
      PyArrayObject* array = NULL;
      /*@SWIG:py_typemaps.i,85,map_matrix@*/
      array = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
      /* !!!!!
      	WARNING! bug (?) : the variable name choosen above must not appear
      	in the string, otherwise swig will not correctly generate
      	final variable names (above name + number)
      	*/
      /* we cannot use require_fortran, because it convert a numpy C array to a numpy
      	fortran array by just modifying the strides */
      if (!array || !require_dimensions(array,2) || !array_is_fortran(array) || !require_native(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
      }
      arg1 = new Matrix<double> ((double *)array_data(array),(int)array_size(array,0),(int)array_size(array,1));
      
      /*@SWIG@*/
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "alltrainDL" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode6 = SWIG_AsVal_bool(swig_obj[2], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "alltrainDL" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array7 = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array7 to a numpy
    	fortran array7 by just modifying the strides */
    if (!array7 || !require_dimensions(array7,2) || !array_is_fortran(array7) || !require_native(array7)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 7 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg7 = new Matrix<double> ((double *)array_data(array7),(int)array_size(array7,0),(int)array_size(array7,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array8 = obj_to_array_no_conversion(swig_obj[4], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array8 to a numpy
    	fortran array8 by just modifying the strides */
    if (!array8 || !require_dimensions(array8,2) || !array_is_fortran(array8) || !require_native(array8)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 8 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg8 = new Matrix<double> ((double *)array_data(array8),(int)array_size(array8,0),(int)array_size(array8,1));
    
    /*@SWIG@*/
  }
  ecode9 = SWIG_AsVal_int(swig_obj[5], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "alltrainDL" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array10 = obj_to_array_no_conversion(swig_obj[6], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array10 to a numpy
    	fortran array10 by just modifying the strides */
    if (!array10 || !require_dimensions(array10,2) || !array_is_fortran(array10) || !require_native(array10)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 10 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg10 = new Matrix<double> ((double *)array_data(array10),(int)array_size(array10,0),(int)array_size(array10,1));
    
    /*@SWIG@*/
  }
  {
    array11 = obj_to_array_no_conversion(swig_obj[7], NPY_DOUBLE);
    if (!array11 || !require_dimensions(array11,1) || !require_contiguous(array11) || !require_native(array11)) SWIG_fail;
    arg11 = new Vector<double> ((double *)array_data(array11),(int)array_size(array11,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray12 = swig_obj[8];
    if ( !( PyObject_HasAttrString(sparray12, "indptr") &&
        PyObject_HasAttrString(sparray12, "indices") &&
        PyObject_HasAttrString(sparray12, "data") &&
        PyObject_HasAttrString(sparray12, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 12 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray12, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray12, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray12, "data");
    PyObject* shape = PyObject_GetAttrString(sparray12, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg12: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg12: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg12: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg12 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray13 = swig_obj[9];
    if ( !( PyObject_HasAttrString(sparray13, "indptr") &&
        PyObject_HasAttrString(sparray13, "indices") &&
        PyObject_HasAttrString(sparray13, "data") &&
        PyObject_HasAttrString(sparray13, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 13 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray13, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray13, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray13, "data");
    PyObject* shape = PyObject_GetAttrString(sparray13, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg13: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg13: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg13: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg13 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    array14 = obj_to_array_no_conversion(swig_obj[10], NPY_INT);
    if (!array14 || !require_dimensions(array14,1) || !require_contiguous(array14) || !require_native(array14)) SWIG_fail;
    arg14 = new Vector<int> ((int *)array_data(array14),(int)array_size(array14,0));
  }
  {
    array15 = obj_to_array_no_conversion(swig_obj[11], NPY_INT);
    if (!array15 || !require_dimensions(array15,1) || !require_contiguous(array15) || !require_native(array15)) SWIG_fail;
    arg15 = new Vector<int> ((int *)array_data(array15),(int)array_size(array15,0));
  }
  ecode16 = SWIG_AsVal_int(swig_obj[12], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "alltrainDL" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_double(swig_obj[13], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "alltrainDL" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_bool(swig_obj[14], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "alltrainDL" "', argument " "18"" of type '" "bool""'");
  } 
  arg18 = static_cast< bool >(val18);
  ecode19 = SWIG_AsVal_bool(swig_obj[15], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "alltrainDL" "', argument " "19"" of type '" "bool""'");
  } 
  arg19 = static_cast< bool >(val19);
  ecode20 = SWIG_AsVal_int(swig_obj[16], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "alltrainDL" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(swig_obj[17], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "alltrainDL" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(swig_obj[18], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "alltrainDL" "', argument " "22"" of type '" "double""'");
  } 
  arg22 = static_cast< double >(val22);
  ecode23 = SWIG_AsVal_double(swig_obj[19], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "alltrainDL" "', argument " "23"" of type '" "double""'");
  } 
  arg23 = static_cast< double >(val23);
  ecode24 = SWIG_AsVal_double(swig_obj[20], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "alltrainDL" "', argument " "24"" of type '" "double""'");
  } 
  arg24 = static_cast< double >(val24);
  ecode25 = SWIG_AsVal_int(swig_obj[21], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "alltrainDL" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(swig_obj[22], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "alltrainDL" "', argument " "26"" of type '" "double""'");
  } 
  arg26 = static_cast< double >(val26);
  ecode27 = SWIG_AsVal_int(swig_obj[23], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "alltrainDL" "', argument " "27"" of type '" "constraint_type""'");
  } 
  arg27 = static_cast< constraint_type >(val27);
  res28 = SWIG_AsCharPtrAndSize(swig_obj[24], &buf28, NULL, &alloc28);
  if (!SWIG_IsOK(res28)) {
    SWIG_exception_fail(SWIG_ArgError(res28), "in method '" "alltrainDL" "', argument " "28"" of type '" "char *""'");
  }
  arg28 = reinterpret_cast< char * >(buf28);
  ecode29 = SWIG_AsVal_bool(swig_obj[25], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "alltrainDL" "', argument " "29"" of type '" "bool""'");
  } 
  arg29 = static_cast< bool >(val29);
  ecode30 = SWIG_AsVal_bool(swig_obj[26], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "alltrainDL" "', argument " "30"" of type '" "bool""'");
  } 
  arg30 = static_cast< bool >(val30);
  ecode31 = SWIG_AsVal_bool(swig_obj[27], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "alltrainDL" "', argument " "31"" of type '" "bool""'");
  } 
  arg31 = static_cast< bool >(val31);
  ecode32 = SWIG_AsVal_int(swig_obj[28], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "alltrainDL" "', argument " "32"" of type '" "constraint_type_D""'");
  } 
  arg32 = static_cast< constraint_type_D >(val32);
  ecode33 = SWIG_AsVal_bool(swig_obj[29], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "alltrainDL" "', argument " "33"" of type '" "bool""'");
  } 
  arg33 = static_cast< bool >(val33);
  ecode34 = SWIG_AsVal_bool(swig_obj[30], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "alltrainDL" "', argument " "34"" of type '" "bool""'");
  } 
  arg34 = static_cast< bool >(val34);
  ecode35 = SWIG_AsVal_bool(swig_obj[31], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "alltrainDL" "', argument " "35"" of type '" "bool""'");
  } 
  arg35 = static_cast< bool >(val35);
  ecode36 = SWIG_AsVal_double(swig_obj[32], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "alltrainDL" "', argument " "36"" of type '" "double""'");
  } 
  arg36 = static_cast< double >(val36);
  ecode37 = SWIG_AsVal_double(swig_obj[33], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "alltrainDL" "', argument " "37"" of type '" "double""'");
  } 
  arg37 = static_cast< double >(val37);
  ecode38 = SWIG_AsVal_double(swig_obj[34], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "alltrainDL" "', argument " "38"" of type '" "double""'");
  } 
  arg38 = static_cast< double >(val38);
  ecode39 = SWIG_AsVal_int(swig_obj[35], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "alltrainDL" "', argument " "39"" of type '" "int""'");
  } 
  arg39 = static_cast< int >(val39);
  ecode40 = SWIG_AsVal_bool(swig_obj[36], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "alltrainDL" "', argument " "40"" of type '" "bool""'");
  } 
  arg40 = static_cast< bool >(val40);
  ecode41 = SWIG_AsVal_int(swig_obj[37], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "alltrainDL" "', argument " "41"" of type '" "int""'");
  } 
  arg41 = static_cast< int >(val41);
  ecode42 = SWIG_AsVal_bool(swig_obj[38], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "alltrainDL" "', argument " "42"" of type '" "bool""'");
  } 
  arg42 = static_cast< bool >(val42);
  ecode43 = SWIG_AsVal_bool(swig_obj[39], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "alltrainDL" "', argument " "43"" of type '" "bool""'");
  } 
  arg43 = static_cast< bool >(val43);
  res44 = SWIG_AsCharPtrAndSize(swig_obj[40], &buf44, NULL, &alloc44);
  if (!SWIG_IsOK(res44)) {
    SWIG_exception_fail(SWIG_ArgError(res44), "in method '" "alltrainDL" "', argument " "44"" of type '" "char *""'");
  }
  arg44 = reinterpret_cast< char * >(buf44);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< double > *)_alltrainDL< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(double));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp dims[2] = {
        m,n
      };
      double *data = data_temp3->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp dims[2] = {
        m,n
      };
      double *data = data_temp4->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    if(data_temp5 != NULL) {
      npy_intp n = data_temp5->n();
      npy_intp dims[1] = {
        n
      };
      int *data = data_temp5->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(1, dims, NPY_INT,(void*)data);
      if (!array) SWIG_fail;
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  {
    delete arg10;
  }
  {
    delete arg11;
  }
  {
    delete arg12;
  }
  {
    delete arg13;
  }
  {
    delete arg14;
  }
  {
    delete arg15;
  }
  if (alloc28 == SWIG_NEWOBJ) delete[] buf28;
  if (alloc44 == SWIG_NEWOBJ) delete[] buf44;
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  {
    delete arg10;
  }
  {
    delete arg11;
  }
  {
    delete arg12;
  }
  {
    delete arg13;
  }
  {
    delete arg14;
  }
  {
    delete arg15;
  }
  if (alloc28 == SWIG_NEWOBJ) delete[] buf28;
  if (alloc44 == SWIG_NEWOBJ) delete[] buf44;
  return NULL;
}


SWIGINTERN PyObject *_wrap_alltrainDL__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Data< float > *arg1 = (Data< float > *) 0 ;
  bool arg2 ;
  Matrix< float > **arg3 = (Matrix< float > **) 0 ;
  Matrix< float > **arg4 = (Matrix< float > **) 0 ;
  Vector< int > **arg5 = (Vector< int > **) 0 ;
  bool arg6 ;
  Matrix< float > *arg7 = (Matrix< float > *) 0 ;
  Matrix< float > *arg8 = (Matrix< float > *) 0 ;
  int arg9 ;
  Matrix< float > *arg10 = (Matrix< float > *) 0 ;
  Vector< float > *arg11 = (Vector< float > *) 0 ;
  SpMatrix< bool > *arg12 = (SpMatrix< bool > *) 0 ;
  SpMatrix< bool > *arg13 = (SpMatrix< bool > *) 0 ;
  Vector< int > *arg14 = (Vector< int > *) 0 ;
  Vector< int > *arg15 = (Vector< int > *) 0 ;
  int arg16 ;
  float arg17 ;
  bool arg18 ;
  bool arg19 ;
  int arg20 ;
  int arg21 ;
  double arg22 ;
  double arg23 ;
  double arg24 ;
  int arg25 ;
  double arg26 ;
  constraint_type arg27 ;
  char *arg28 = (char *) 0 ;
  bool arg29 ;
  bool arg30 ;
  bool arg31 ;
  constraint_type_D arg32 ;
  bool arg33 ;
  bool arg34 ;
  bool arg35 ;
  double arg36 ;
  double arg37 ;
  float arg38 ;
  int arg39 ;
  bool arg40 ;
  int arg41 ;
  bool arg42 ;
  bool arg43 ;
  char *arg44 = (char *) 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  Matrix< float > *data_temp3 ;
  Matrix< float > *data_temp4 ;
  Vector< int > *data_temp5 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyArrayObject *array7 = NULL ;
  PyArrayObject *array8 = NULL ;
  int val9 ;
  int ecode9 = 0 ;
  PyArrayObject *array10 = NULL ;
  PyArrayObject *array11 = NULL ;
  PyObject *sparray12 = NULL ;
  PyObject *sparray13 = NULL ;
  PyArrayObject *array14 = NULL ;
  PyArrayObject *array15 = NULL ;
  int val16 ;
  int ecode16 = 0 ;
  float val17 ;
  int ecode17 = 0 ;
  bool val18 ;
  int ecode18 = 0 ;
  bool val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  int val27 ;
  int ecode27 = 0 ;
  int res28 ;
  char *buf28 = 0 ;
  int alloc28 = 0 ;
  bool val29 ;
  int ecode29 = 0 ;
  bool val30 ;
  int ecode30 = 0 ;
  bool val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  bool val33 ;
  int ecode33 = 0 ;
  bool val34 ;
  int ecode34 = 0 ;
  bool val35 ;
  int ecode35 = 0 ;
  double val36 ;
  int ecode36 = 0 ;
  double val37 ;
  int ecode37 = 0 ;
  float val38 ;
  int ecode38 = 0 ;
  int val39 ;
  int ecode39 = 0 ;
  bool val40 ;
  int ecode40 = 0 ;
  int val41 ;
  int ecode41 = 0 ;
  bool val42 ;
  int ecode42 = 0 ;
  bool val43 ;
  int ecode43 = 0 ;
  int res44 ;
  char *buf44 = 0 ;
  int alloc44 = 0 ;
  Matrix< float > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  {
    arg4 = &data_temp4;
  }
  {
    arg5 = &data_temp5;
  }
  (void)self;
  if ((nobjs < 41) || (nobjs > 41)) SWIG_fail;
  {
    if ( PyObject_HasAttrString(swig_obj[0], "indptr")) {
      PyObject* sparray =swig_obj[0];
      /*@SWIG:py_typemaps.i,181,map_sparse@*/
      sparray = swig_obj[0];
      if ( !( PyObject_HasAttrString(sparray, "indptr") &&
          PyObject_HasAttrString(sparray, "indices") &&
          PyObject_HasAttrString(sparray, "data") &&
          PyObject_HasAttrString(sparray, "shape"))) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 : not a column compressed sparse matrix");
        return NULL;
      }
      
      /* fetch sparse attributes */
      PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray, "indptr");
      PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray, "indices");
      PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray, "data");
      PyObject* shape = PyObject_GetAttrString(sparray, "shape");
      
      /* check that types are OK */
      if (check_array(indptr,NPY_INT))
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indptr array should be 1d int's");
        return NULL;
      }
      
      if check_array(indices,NPY_INT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg1: indices array should be 1d int's");
        return NULL;
      }
      
      if check_array(data, NPY_FLOAT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg1: data array should be 1d and match datatype");
        return NULL;
      }
      
      if (!PyTuple_Check(shape))
      {
        PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
        return NULL;
      }
      
      /* get array dimensions */
      int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
      int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
      
      
      int *pB = (int *)array_data(indptr);
      int *pE = pB + 1;
      int nzmax = (int)array_size(data,0);
      Py_DECREF(indptr);
      Py_DECREF(indices);
      Py_DECREF(data);
      Py_DECREF(shape);
      
      
      arg1 = new SpMatrix<float> ((float *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
      /*@SWIG@*/
    } else {
      PyArrayObject* array = NULL;
      /*@SWIG:py_typemaps.i,85,map_matrix@*/
      array = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
      /* !!!!!
      	WARNING! bug (?) : the variable name choosen above must not appear
      	in the string, otherwise swig will not correctly generate
      	final variable names (above name + number)
      	*/
      /* we cannot use require_fortran, because it convert a numpy C array to a numpy
      	fortran array by just modifying the strides */
      if (!array || !require_dimensions(array,2) || !array_is_fortran(array) || !require_native(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
      }
      arg1 = new Matrix<float> ((float *)array_data(array),(int)array_size(array,0),(int)array_size(array,1));
      
      /*@SWIG@*/
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "alltrainDL" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode6 = SWIG_AsVal_bool(swig_obj[2], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "alltrainDL" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array7 = obj_to_array_no_conversion(swig_obj[3], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array7 to a numpy
    	fortran array7 by just modifying the strides */
    if (!array7 || !require_dimensions(array7,2) || !array_is_fortran(array7) || !require_native(array7)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 7 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg7 = new Matrix<float> ((float *)array_data(array7),(int)array_size(array7,0),(int)array_size(array7,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array8 = obj_to_array_no_conversion(swig_obj[4], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array8 to a numpy
    	fortran array8 by just modifying the strides */
    if (!array8 || !require_dimensions(array8,2) || !array_is_fortran(array8) || !require_native(array8)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 8 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg8 = new Matrix<float> ((float *)array_data(array8),(int)array_size(array8,0),(int)array_size(array8,1));
    
    /*@SWIG@*/
  }
  ecode9 = SWIG_AsVal_int(swig_obj[5], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "alltrainDL" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array10 = obj_to_array_no_conversion(swig_obj[6], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array10 to a numpy
    	fortran array10 by just modifying the strides */
    if (!array10 || !require_dimensions(array10,2) || !array_is_fortran(array10) || !require_native(array10)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 10 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg10 = new Matrix<float> ((float *)array_data(array10),(int)array_size(array10,0),(int)array_size(array10,1));
    
    /*@SWIG@*/
  }
  {
    array11 = obj_to_array_no_conversion(swig_obj[7], NPY_FLOAT);
    if (!array11 || !require_dimensions(array11,1) || !require_contiguous(array11) || !require_native(array11)) SWIG_fail;
    arg11 = new Vector<float> ((float *)array_data(array11),(int)array_size(array11,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray12 = swig_obj[8];
    if ( !( PyObject_HasAttrString(sparray12, "indptr") &&
        PyObject_HasAttrString(sparray12, "indices") &&
        PyObject_HasAttrString(sparray12, "data") &&
        PyObject_HasAttrString(sparray12, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 12 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray12, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray12, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray12, "data");
    PyObject* shape = PyObject_GetAttrString(sparray12, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg12: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg12: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg12: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg12 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray13 = swig_obj[9];
    if ( !( PyObject_HasAttrString(sparray13, "indptr") &&
        PyObject_HasAttrString(sparray13, "indices") &&
        PyObject_HasAttrString(sparray13, "data") &&
        PyObject_HasAttrString(sparray13, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 13 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray13, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray13, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray13, "data");
    PyObject* shape = PyObject_GetAttrString(sparray13, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg13: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg13: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg13: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg13 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    array14 = obj_to_array_no_conversion(swig_obj[10], NPY_INT);
    if (!array14 || !require_dimensions(array14,1) || !require_contiguous(array14) || !require_native(array14)) SWIG_fail;
    arg14 = new Vector<int> ((int *)array_data(array14),(int)array_size(array14,0));
  }
  {
    array15 = obj_to_array_no_conversion(swig_obj[11], NPY_INT);
    if (!array15 || !require_dimensions(array15,1) || !require_contiguous(array15) || !require_native(array15)) SWIG_fail;
    arg15 = new Vector<int> ((int *)array_data(array15),(int)array_size(array15,0));
  }
  ecode16 = SWIG_AsVal_int(swig_obj[12], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "alltrainDL" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_float(swig_obj[13], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "alltrainDL" "', argument " "17"" of type '" "float""'");
  } 
  arg17 = static_cast< float >(val17);
  ecode18 = SWIG_AsVal_bool(swig_obj[14], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "alltrainDL" "', argument " "18"" of type '" "bool""'");
  } 
  arg18 = static_cast< bool >(val18);
  ecode19 = SWIG_AsVal_bool(swig_obj[15], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "alltrainDL" "', argument " "19"" of type '" "bool""'");
  } 
  arg19 = static_cast< bool >(val19);
  ecode20 = SWIG_AsVal_int(swig_obj[16], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "alltrainDL" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(swig_obj[17], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "alltrainDL" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(swig_obj[18], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "alltrainDL" "', argument " "22"" of type '" "double""'");
  } 
  arg22 = static_cast< double >(val22);
  ecode23 = SWIG_AsVal_double(swig_obj[19], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "alltrainDL" "', argument " "23"" of type '" "double""'");
  } 
  arg23 = static_cast< double >(val23);
  ecode24 = SWIG_AsVal_double(swig_obj[20], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "alltrainDL" "', argument " "24"" of type '" "double""'");
  } 
  arg24 = static_cast< double >(val24);
  ecode25 = SWIG_AsVal_int(swig_obj[21], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "alltrainDL" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(swig_obj[22], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "alltrainDL" "', argument " "26"" of type '" "double""'");
  } 
  arg26 = static_cast< double >(val26);
  ecode27 = SWIG_AsVal_int(swig_obj[23], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "alltrainDL" "', argument " "27"" of type '" "constraint_type""'");
  } 
  arg27 = static_cast< constraint_type >(val27);
  res28 = SWIG_AsCharPtrAndSize(swig_obj[24], &buf28, NULL, &alloc28);
  if (!SWIG_IsOK(res28)) {
    SWIG_exception_fail(SWIG_ArgError(res28), "in method '" "alltrainDL" "', argument " "28"" of type '" "char *""'");
  }
  arg28 = reinterpret_cast< char * >(buf28);
  ecode29 = SWIG_AsVal_bool(swig_obj[25], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "alltrainDL" "', argument " "29"" of type '" "bool""'");
  } 
  arg29 = static_cast< bool >(val29);
  ecode30 = SWIG_AsVal_bool(swig_obj[26], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "alltrainDL" "', argument " "30"" of type '" "bool""'");
  } 
  arg30 = static_cast< bool >(val30);
  ecode31 = SWIG_AsVal_bool(swig_obj[27], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "alltrainDL" "', argument " "31"" of type '" "bool""'");
  } 
  arg31 = static_cast< bool >(val31);
  ecode32 = SWIG_AsVal_int(swig_obj[28], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "alltrainDL" "', argument " "32"" of type '" "constraint_type_D""'");
  } 
  arg32 = static_cast< constraint_type_D >(val32);
  ecode33 = SWIG_AsVal_bool(swig_obj[29], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "alltrainDL" "', argument " "33"" of type '" "bool""'");
  } 
  arg33 = static_cast< bool >(val33);
  ecode34 = SWIG_AsVal_bool(swig_obj[30], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "alltrainDL" "', argument " "34"" of type '" "bool""'");
  } 
  arg34 = static_cast< bool >(val34);
  ecode35 = SWIG_AsVal_bool(swig_obj[31], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "alltrainDL" "', argument " "35"" of type '" "bool""'");
  } 
  arg35 = static_cast< bool >(val35);
  ecode36 = SWIG_AsVal_double(swig_obj[32], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "alltrainDL" "', argument " "36"" of type '" "double""'");
  } 
  arg36 = static_cast< double >(val36);
  ecode37 = SWIG_AsVal_double(swig_obj[33], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "alltrainDL" "', argument " "37"" of type '" "double""'");
  } 
  arg37 = static_cast< double >(val37);
  ecode38 = SWIG_AsVal_float(swig_obj[34], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "alltrainDL" "', argument " "38"" of type '" "float""'");
  } 
  arg38 = static_cast< float >(val38);
  ecode39 = SWIG_AsVal_int(swig_obj[35], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "alltrainDL" "', argument " "39"" of type '" "int""'");
  } 
  arg39 = static_cast< int >(val39);
  ecode40 = SWIG_AsVal_bool(swig_obj[36], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "alltrainDL" "', argument " "40"" of type '" "bool""'");
  } 
  arg40 = static_cast< bool >(val40);
  ecode41 = SWIG_AsVal_int(swig_obj[37], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "alltrainDL" "', argument " "41"" of type '" "int""'");
  } 
  arg41 = static_cast< int >(val41);
  ecode42 = SWIG_AsVal_bool(swig_obj[38], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "alltrainDL" "', argument " "42"" of type '" "bool""'");
  } 
  arg42 = static_cast< bool >(val42);
  ecode43 = SWIG_AsVal_bool(swig_obj[39], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "alltrainDL" "', argument " "43"" of type '" "bool""'");
  } 
  arg43 = static_cast< bool >(val43);
  res44 = SWIG_AsCharPtrAndSize(swig_obj[40], &buf44, NULL, &alloc44);
  if (!SWIG_IsOK(res44)) {
    SWIG_exception_fail(SWIG_ArgError(res44), "in method '" "alltrainDL" "', argument " "44"" of type '" "char *""'");
  }
  arg44 = reinterpret_cast< char * >(buf44);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< float > *)_alltrainDL< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(float));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp dims[2] = {
        m,n
      };
      float *data = data_temp3->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_FLOAT,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp dims[2] = {
        m,n
      };
      float *data = data_temp4->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(2, dims, NPY_FLOAT,(void*)data);
      if (!array) SWIG_fail;
      if (! require_fortran(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran argout matrix"); SWIG_fail;
      }
      
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    if(data_temp5 != NULL) {
      npy_intp n = data_temp5->n();
      npy_intp dims[1] = {
        n
      };
      int *data = data_temp5->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(1, dims, NPY_INT,(void*)data);
      if (!array) SWIG_fail;
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  {
    delete arg10;
  }
  {
    delete arg11;
  }
  {
    delete arg12;
  }
  {
    delete arg13;
  }
  {
    delete arg14;
  }
  {
    delete arg15;
  }
  if (alloc28 == SWIG_NEWOBJ) delete[] buf28;
  if (alloc44 == SWIG_NEWOBJ) delete[] buf44;
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  {
    delete arg10;
  }
  {
    delete arg11;
  }
  {
    delete arg12;
  }
  {
    delete arg13;
  }
  {
    delete arg14;
  }
  {
    delete arg15;
  }
  if (alloc28 == SWIG_NEWOBJ) delete[] buf28;
  if (alloc44 == SWIG_NEWOBJ) delete[] buf44;
  return NULL;
}


SWIGINTERN PyObject *_wrap_alltrainDL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[42] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "alltrainDL", 0, 41, argv))) SWIG_fail;
  --argc;
  if (argc == 41) {
    int _v = 0;
    {
      {
        if( PyObject_HasAttrString(argv[0], "indptr"))
        _v = check_sparse(argv[0]);
        else
        _v = check_matrix(argv[0],NPY_FLOAT);
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[3]) && (array_numdims(argv[3]) == 2) && PyArray_EquivTypenums(array_type(argv[3]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[4]) && (array_numdims(argv[4]) == 2) && PyArray_EquivTypenums(array_type(argv[4]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[6]) && (array_numdims(argv[6]) == 2) && PyArray_EquivTypenums(array_type(argv[6]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[7]) && (array_numdims(argv[7]) == 1) && PyArray_EquivTypenums(array_type(argv[7]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[13], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[34], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_alltrainDL__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 41) {
    PyObject *retobj = _wrap_alltrainDL__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'alltrainDL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _alltrainDL< double >(Data< double > *,bool,Matrix< double > **,Matrix< double > **,Vector< int > **,bool,Matrix< double > *,Matrix< double > *,int,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,double,bool,bool,int,int,double,double,double,int,double,constraint_type,char *,bool,bool,bool,constraint_type_D,bool,bool,bool,double,double,double,int,bool,int,bool,bool,char *)\n"
    "    _alltrainDL< float >(Data< float > *,bool,Matrix< float > **,Matrix< float > **,Vector< int > **,bool,Matrix< float > *,Matrix< float > *,int,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,float,bool,bool,int,int,double,double,double,int,double,constraint_type,char *,bool,bool,bool,constraint_type_D,bool,bool,bool,double,double,float,int,bool,int,bool,bool,char *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_archetypalAnalysis__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  int arg2 ;
  SpMatrix< double > **arg3 = (SpMatrix< double > **) 0 ;
  SpMatrix< double > **arg4 = (SpMatrix< double > **) 0 ;
  bool arg5 ;
  double arg6 ;
  bool arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  int arg11 ;
  PyArrayObject *array1 = NULL ;
  int val2 ;
  int ecode2 = 0 ;
  SpMatrix< double > *data_temp3 ;
  SpMatrix< double > *data_temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  Matrix< double > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  {
    arg4 = &data_temp4;
  }
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "archetypalAnalysis" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode5 = SWIG_AsVal_bool(swig_obj[2], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "archetypalAnalysis" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "archetypalAnalysis" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[4], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "archetypalAnalysis" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[5], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "archetypalAnalysis" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[6], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "archetypalAnalysis" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[7], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "archetypalAnalysis" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_int(swig_obj[8], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "archetypalAnalysis" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< double > *)_archetypalAnalysis< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(double));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp nzmax = data_temp3->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      double *xdata = data_temp3->v();
      double *data = (double *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(double));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp3->r();
      int *pB = data_temp3->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp nzmax = data_temp4->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      double *xdata = data_temp4->v();
      double *data = (double *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(double));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp4->r();
      int *pB = data_temp4->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_archetypalAnalysis__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  int arg2 ;
  SpMatrix< float > **arg3 = (SpMatrix< float > **) 0 ;
  SpMatrix< float > **arg4 = (SpMatrix< float > **) 0 ;
  bool arg5 ;
  float arg6 ;
  bool arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  int arg11 ;
  PyArrayObject *array1 = NULL ;
  int val2 ;
  int ecode2 = 0 ;
  SpMatrix< float > *data_temp3 ;
  SpMatrix< float > *data_temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  Matrix< float > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  {
    arg4 = &data_temp4;
  }
  (void)self;
  if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "archetypalAnalysis" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode5 = SWIG_AsVal_bool(swig_obj[2], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "archetypalAnalysis" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "archetypalAnalysis" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[4], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "archetypalAnalysis" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[5], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "archetypalAnalysis" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[6], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "archetypalAnalysis" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[7], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "archetypalAnalysis" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_int(swig_obj[8], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "archetypalAnalysis" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< float > *)_archetypalAnalysis< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(float));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp nzmax = data_temp3->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      float *xdata = data_temp3->v();
      float *data = (float *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(float));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp3->r();
      int *pB = data_temp3->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp nzmax = data_temp4->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      float *xdata = data_temp4->v();
      float *data = (float *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(float));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp4->r();
      int *pB = data_temp4->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_archetypalAnalysis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "archetypalAnalysis", 0, 9, argv))) SWIG_fail;
  --argc;
  if (argc == 9) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[3], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_archetypalAnalysis__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 9) {
    PyObject *retobj = _wrap_archetypalAnalysis__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'archetypalAnalysis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _archetypalAnalysis< double >(Matrix< double > *,int,SpMatrix< double > **,SpMatrix< double > **,bool,double,bool,int,int,bool,int)\n"
    "    _archetypalAnalysis< float >(Matrix< float > *,int,SpMatrix< float > **,SpMatrix< float > **,bool,float,bool,int,int,bool,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_archetypalAnalysisInit__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  SpMatrix< double > **arg3 = (SpMatrix< double > **) 0 ;
  SpMatrix< double > **arg4 = (SpMatrix< double > **) 0 ;
  bool arg5 ;
  double arg6 ;
  bool arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  SpMatrix< double > *data_temp3 ;
  SpMatrix< double > *data_temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  Matrix< double > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  {
    arg4 = &data_temp4;
  }
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[2], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "archetypalAnalysisInit" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "archetypalAnalysisInit" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[4], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "archetypalAnalysisInit" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[5], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "archetypalAnalysisInit" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[6], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "archetypalAnalysisInit" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(swig_obj[7], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "archetypalAnalysisInit" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< double > *)_archetypalAnalysisInit< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(double));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp nzmax = data_temp3->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      double *xdata = data_temp3->v();
      double *data = (double *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(double));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp3->r();
      int *pB = data_temp3->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp nzmax = data_temp4->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      double *xdata = data_temp4->v();
      double *data = (double *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(double));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp4->r();
      int *pB = data_temp4->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_archetypalAnalysisInit__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  SpMatrix< float > **arg3 = (SpMatrix< float > **) 0 ;
  SpMatrix< float > **arg4 = (SpMatrix< float > **) 0 ;
  bool arg5 ;
  float arg6 ;
  bool arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  SpMatrix< float > *data_temp3 ;
  SpMatrix< float > *data_temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  Matrix< float > *result = 0 ;
  
  {
    arg3 = &data_temp3;
  }
  {
    arg4 = &data_temp4;
  }
  (void)self;
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[2], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "archetypalAnalysisInit" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "archetypalAnalysisInit" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[4], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "archetypalAnalysisInit" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_int(swig_obj[5], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "archetypalAnalysisInit" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[6], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "archetypalAnalysisInit" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(swig_obj[7], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "archetypalAnalysisInit" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< float > *)_archetypalAnalysisInit< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(float));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp nzmax = data_temp3->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      float *xdata = data_temp3->v();
      float *data = (float *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(float));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp3->r();
      int *pB = data_temp3->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    if(data_temp4 != NULL) {
      npy_intp m = data_temp4->m();
      npy_intp n = data_temp4->n();
      npy_intp nzmax = data_temp4->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      float *xdata = data_temp4->v();
      float *data = (float *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(float));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp4->r();
      int *pB = data_temp4->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_archetypalAnalysisInit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "archetypalAnalysisInit", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 8) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[3], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_archetypalAnalysisInit__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 8) {
    PyObject *retobj = _wrap_archetypalAnalysisInit__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'archetypalAnalysisInit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _archetypalAnalysisInit< double >(Matrix< double > *,Matrix< double > *,SpMatrix< double > **,SpMatrix< double > **,bool,double,bool,int,int,int)\n"
    "    _archetypalAnalysisInit< float >(Matrix< float > *,Matrix< float > *,SpMatrix< float > **,SpMatrix< float > **,bool,float,bool,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decompSimplex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  bool arg3 ;
  int arg4 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SpMatrix< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decompSimplex" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "decompSimplex" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< double > *)_decompSimplex< double >(arg1,arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_DOUBLE);
    int i;
    double *xdata = result->v();
    double *data = (double *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(double));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_decompSimplex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  bool arg3 ;
  int arg4 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SpMatrix< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decompSimplex" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "decompSimplex" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (SpMatrix< float > *)_decompSimplex< float >(arg1,arg2,arg3,arg4);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp nzmax = result->nzmax();
    npy_intp dims[2] = {
      m,n
    };
    dims[0] = n + 1;
    PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    dims[0] = nzmax;
    PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
    PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_FLOAT);
    int i;
    float *xdata = result->v();
    float *data = (float *)array_data(vdata);
    memcpy(data,xdata,nzmax * sizeof(float));
    npy_int *pi = (npy_int *)array_data(indices);
    int *r = result->r();
    int *pB = result->pB();
    if(sizeof(npy_int) == sizeof(int)) {
      memcpy(pi,r,nzmax * sizeof(int));
      pi = (npy_int *)array_data(indptr);
      memcpy(pi,pB,(n + 1) * sizeof(int));
    } else {
      for(i = 0;i< nzmax;i++)
      *(pi+i) = (npy_int) *(r+i);
      pi = (npy_int *)array_data(indptr);
      for(i = 0;i< n + 1;i++)
      *(pi+i) = (npy_int) *(pB+i);
    }
    PyObject* tuple = PyTuple_New(4);
    PyObject* shape = PyTuple_New(2);
    PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
    PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
    PyTuple_SetItem(tuple,0, (PyObject* )indptr);
    PyTuple_SetItem(tuple,1,(PyObject* )indices);
    PyTuple_SetItem(tuple,2,(PyObject* )vdata);
    PyTuple_SetItem(tuple,3,shape);
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_decompSimplex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "decompSimplex", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_decompSimplex__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 4) {
    PyObject *retobj = _wrap_decompSimplex__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'decompSimplex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _decompSimplex< double >(Matrix< double > *,Matrix< double > *,bool,int)\n"
    "    _decompSimplex< float >(Matrix< float > *,Matrix< float > *,bool,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  AbstractMatrixB< double > *arg2 = (AbstractMatrixB< double > *) 0 ;
  Matrix< double > *arg3 = (Matrix< double > *) 0 ;
  Matrix< double > *arg4 = (Matrix< double > *) 0 ;
  Vector< int > *arg5 = (Vector< int > *) 0 ;
  int arg6 ;
  int arg7 ;
  double arg8 ;
  bool arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  double arg17 ;
  double arg18 ;
  int arg19 ;
  int arg20 ;
  bool arg21 ;
  bool arg22 ;
  bool arg23 ;
  bool arg24 ;
  bool arg25 ;
  char *arg26 = (char *) 0 ;
  char *arg27 = (char *) 0 ;
  bool arg28 ;
  bool arg29 ;
  bool arg30 ;
  bool arg31 ;
  bool arg32 ;
  bool arg33 ;
  char *arg34 = (char *) 0 ;
  bool arg35 ;
  Vector< double > *arg36 = (Vector< double > *) 0 ;
  int arg37 ;
  bool arg38 ;
  bool arg39 ;
  int arg40 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  int val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  bool val21 ;
  int ecode21 = 0 ;
  bool val22 ;
  int ecode22 = 0 ;
  bool val23 ;
  int ecode23 = 0 ;
  bool val24 ;
  int ecode24 = 0 ;
  bool val25 ;
  int ecode25 = 0 ;
  int res26 ;
  char *buf26 = 0 ;
  int alloc26 = 0 ;
  int res27 ;
  char *buf27 = 0 ;
  int alloc27 = 0 ;
  bool val28 ;
  int ecode28 = 0 ;
  bool val29 ;
  int ecode29 = 0 ;
  bool val30 ;
  int ecode30 = 0 ;
  bool val31 ;
  int ecode31 = 0 ;
  bool val32 ;
  int ecode32 = 0 ;
  bool val33 ;
  int ecode33 = 0 ;
  int res34 ;
  char *buf34 = 0 ;
  int alloc34 = 0 ;
  bool val35 ;
  int ecode35 = 0 ;
  PyArrayObject *array36 = NULL ;
  int val37 ;
  int ecode37 = 0 ;
  bool val38 ;
  int ecode38 = 0 ;
  bool val39 ;
  int ecode39 = 0 ;
  int val40 ;
  int ecode40 = 0 ;
  Matrix< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 40) || (nobjs > 40)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    if ( PyObject_HasAttrString(swig_obj[1], "indptr")) {
      PyObject* sparray =swig_obj[1];
      /*@SWIG:py_typemaps.i,181,map_sparse@*/
      sparray = swig_obj[1];
      if ( !( PyObject_HasAttrString(sparray, "indptr") &&
          PyObject_HasAttrString(sparray, "indices") &&
          PyObject_HasAttrString(sparray, "data") &&
          PyObject_HasAttrString(sparray, "shape"))) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 2 : not a column compressed sparse matrix");
        return NULL;
      }
      
      /* fetch sparse attributes */
      PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray, "indptr");
      PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray, "indices");
      PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray, "data");
      PyObject* shape = PyObject_GetAttrString(sparray, "shape");
      
      /* check that types are OK */
      if (check_array(indptr,NPY_INT))
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indptr array should be 1d int's");
        return NULL;
      }
      
      if check_array(indices,NPY_INT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indices array should be 1d int's");
        return NULL;
      }
      
      if check_array(data, NPY_DOUBLE)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: data array should be 1d and match datatype");
        return NULL;
      }
      
      if (!PyTuple_Check(shape))
      {
        PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
        return NULL;
      }
      
      /* get array dimensions */
      int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
      int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
      
      
      int *pB = (int *)array_data(indptr);
      int *pE = pB + 1;
      int nzmax = (int)array_size(data,0);
      Py_DECREF(indptr);
      Py_DECREF(indices);
      Py_DECREF(data);
      Py_DECREF(shape);
      
      
      arg2 = new SpMatrix<double> ((double *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
      /*@SWIG@*/
    } else {
      PyArrayObject* array = NULL;
      /*@SWIG:py_typemaps.i,85,map_matrix@*/
      array = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
      /* !!!!!
      	WARNING! bug (?) : the variable name choosen above must not appear
      	in the string, otherwise swig will not correctly generate
      	final variable names (above name + number)
      	*/
      /* we cannot use require_fortran, because it convert a numpy C array to a numpy
      	fortran array by just modifying the strides */
      if (!array || !require_dimensions(array,2) || !array_is_fortran(array) || !require_native(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
      }
      arg2 = new Matrix<double> ((double *)array_data(array),(int)array_size(array,0),(int)array_size(array,1));
      
      /*@SWIG@*/
    }
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<double> ((double *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array4 = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array4 to a numpy
    	fortran array4 by just modifying the strides */
    if (!array4 || !require_dimensions(array4,2) || !array_is_fortran(array4) || !require_native(array4)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 4 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg4 = new Matrix<double> ((double *)array_data(array4),(int)array_size(array4,0),(int)array_size(array4,1));
    
    /*@SWIG@*/
  }
  {
    array5 = obj_to_array_no_conversion(swig_obj[4], NPY_INT);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = new Vector<int> ((int *)array_data(array5),(int)array_size(array5,0));
  }
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fistaFlat" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fistaFlat" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fistaFlat" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fistaFlat" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_double(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fistaFlat" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fistaFlat" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fistaFlat" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fistaFlat" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "fistaFlat" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "fistaFlat" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "fistaFlat" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "fistaFlat" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_double(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "fistaFlat" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_int(swig_obj[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "fistaFlat" "', argument " "19"" of type '" "int""'");
  } 
  arg19 = static_cast< int >(val19);
  ecode20 = SWIG_AsVal_int(swig_obj[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "fistaFlat" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_bool(swig_obj[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "fistaFlat" "', argument " "21"" of type '" "bool""'");
  } 
  arg21 = static_cast< bool >(val21);
  ecode22 = SWIG_AsVal_bool(swig_obj[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "fistaFlat" "', argument " "22"" of type '" "bool""'");
  } 
  arg22 = static_cast< bool >(val22);
  ecode23 = SWIG_AsVal_bool(swig_obj[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "fistaFlat" "', argument " "23"" of type '" "bool""'");
  } 
  arg23 = static_cast< bool >(val23);
  ecode24 = SWIG_AsVal_bool(swig_obj[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "fistaFlat" "', argument " "24"" of type '" "bool""'");
  } 
  arg24 = static_cast< bool >(val24);
  ecode25 = SWIG_AsVal_bool(swig_obj[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "fistaFlat" "', argument " "25"" of type '" "bool""'");
  } 
  arg25 = static_cast< bool >(val25);
  res26 = SWIG_AsCharPtrAndSize(swig_obj[25], &buf26, NULL, &alloc26);
  if (!SWIG_IsOK(res26)) {
    SWIG_exception_fail(SWIG_ArgError(res26), "in method '" "fistaFlat" "', argument " "26"" of type '" "char *""'");
  }
  arg26 = reinterpret_cast< char * >(buf26);
  res27 = SWIG_AsCharPtrAndSize(swig_obj[26], &buf27, NULL, &alloc27);
  if (!SWIG_IsOK(res27)) {
    SWIG_exception_fail(SWIG_ArgError(res27), "in method '" "fistaFlat" "', argument " "27"" of type '" "char *""'");
  }
  arg27 = reinterpret_cast< char * >(buf27);
  ecode28 = SWIG_AsVal_bool(swig_obj[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "fistaFlat" "', argument " "28"" of type '" "bool""'");
  } 
  arg28 = static_cast< bool >(val28);
  ecode29 = SWIG_AsVal_bool(swig_obj[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "fistaFlat" "', argument " "29"" of type '" "bool""'");
  } 
  arg29 = static_cast< bool >(val29);
  ecode30 = SWIG_AsVal_bool(swig_obj[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "fistaFlat" "', argument " "30"" of type '" "bool""'");
  } 
  arg30 = static_cast< bool >(val30);
  ecode31 = SWIG_AsVal_bool(swig_obj[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "fistaFlat" "', argument " "31"" of type '" "bool""'");
  } 
  arg31 = static_cast< bool >(val31);
  ecode32 = SWIG_AsVal_bool(swig_obj[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "fistaFlat" "', argument " "32"" of type '" "bool""'");
  } 
  arg32 = static_cast< bool >(val32);
  ecode33 = SWIG_AsVal_bool(swig_obj[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "fistaFlat" "', argument " "33"" of type '" "bool""'");
  } 
  arg33 = static_cast< bool >(val33);
  res34 = SWIG_AsCharPtrAndSize(swig_obj[33], &buf34, NULL, &alloc34);
  if (!SWIG_IsOK(res34)) {
    SWIG_exception_fail(SWIG_ArgError(res34), "in method '" "fistaFlat" "', argument " "34"" of type '" "char *""'");
  }
  arg34 = reinterpret_cast< char * >(buf34);
  ecode35 = SWIG_AsVal_bool(swig_obj[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "fistaFlat" "', argument " "35"" of type '" "bool""'");
  } 
  arg35 = static_cast< bool >(val35);
  {
    array36 = obj_to_array_no_conversion(swig_obj[35], NPY_DOUBLE);
    if (!array36 || !require_dimensions(array36,1) || !require_contiguous(array36) || !require_native(array36)) SWIG_fail;
    arg36 = new Vector<double> ((double *)array_data(array36),(int)array_size(array36,0));
  }
  ecode37 = SWIG_AsVal_int(swig_obj[36], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "fistaFlat" "', argument " "37"" of type '" "int""'");
  } 
  arg37 = static_cast< int >(val37);
  ecode38 = SWIG_AsVal_bool(swig_obj[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "fistaFlat" "', argument " "38"" of type '" "bool""'");
  } 
  arg38 = static_cast< bool >(val38);
  ecode39 = SWIG_AsVal_bool(swig_obj[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "fistaFlat" "', argument " "39"" of type '" "bool""'");
  } 
  arg39 = static_cast< bool >(val39);
  ecode40 = SWIG_AsVal_int(swig_obj[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "fistaFlat" "', argument " "40"" of type '" "int""'");
  } 
  arg40 = static_cast< int >(val40);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< double > *)_fistaFlat< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(double));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc26 == SWIG_NEWOBJ) delete[] buf26;
  if (alloc27 == SWIG_NEWOBJ) delete[] buf27;
  if (alloc34 == SWIG_NEWOBJ) delete[] buf34;
  {
    delete arg36;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc26 == SWIG_NEWOBJ) delete[] buf26;
  if (alloc27 == SWIG_NEWOBJ) delete[] buf27;
  if (alloc34 == SWIG_NEWOBJ) delete[] buf34;
  {
    delete arg36;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fistaFlat__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  AbstractMatrixB< float > *arg2 = (AbstractMatrixB< float > *) 0 ;
  Matrix< float > *arg3 = (Matrix< float > *) 0 ;
  Matrix< float > *arg4 = (Matrix< float > *) 0 ;
  Vector< int > *arg5 = (Vector< int > *) 0 ;
  int arg6 ;
  int arg7 ;
  float arg8 ;
  bool arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  float arg18 ;
  int arg19 ;
  int arg20 ;
  bool arg21 ;
  bool arg22 ;
  bool arg23 ;
  bool arg24 ;
  bool arg25 ;
  char *arg26 = (char *) 0 ;
  char *arg27 = (char *) 0 ;
  bool arg28 ;
  bool arg29 ;
  bool arg30 ;
  bool arg31 ;
  bool arg32 ;
  bool arg33 ;
  char *arg34 = (char *) 0 ;
  bool arg35 ;
  Vector< float > *arg36 = (Vector< float > *) 0 ;
  int arg37 ;
  bool arg38 ;
  bool arg39 ;
  int arg40 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  float val13 ;
  int ecode13 = 0 ;
  float val14 ;
  int ecode14 = 0 ;
  float val15 ;
  int ecode15 = 0 ;
  float val16 ;
  int ecode16 = 0 ;
  float val17 ;
  int ecode17 = 0 ;
  float val18 ;
  int ecode18 = 0 ;
  int val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  bool val21 ;
  int ecode21 = 0 ;
  bool val22 ;
  int ecode22 = 0 ;
  bool val23 ;
  int ecode23 = 0 ;
  bool val24 ;
  int ecode24 = 0 ;
  bool val25 ;
  int ecode25 = 0 ;
  int res26 ;
  char *buf26 = 0 ;
  int alloc26 = 0 ;
  int res27 ;
  char *buf27 = 0 ;
  int alloc27 = 0 ;
  bool val28 ;
  int ecode28 = 0 ;
  bool val29 ;
  int ecode29 = 0 ;
  bool val30 ;
  int ecode30 = 0 ;
  bool val31 ;
  int ecode31 = 0 ;
  bool val32 ;
  int ecode32 = 0 ;
  bool val33 ;
  int ecode33 = 0 ;
  int res34 ;
  char *buf34 = 0 ;
  int alloc34 = 0 ;
  bool val35 ;
  int ecode35 = 0 ;
  PyArrayObject *array36 = NULL ;
  int val37 ;
  int ecode37 = 0 ;
  bool val38 ;
  int ecode38 = 0 ;
  bool val39 ;
  int ecode39 = 0 ;
  int val40 ;
  int ecode40 = 0 ;
  Matrix< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 40) || (nobjs > 40)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    if ( PyObject_HasAttrString(swig_obj[1], "indptr")) {
      PyObject* sparray =swig_obj[1];
      /*@SWIG:py_typemaps.i,181,map_sparse@*/
      sparray = swig_obj[1];
      if ( !( PyObject_HasAttrString(sparray, "indptr") &&
          PyObject_HasAttrString(sparray, "indices") &&
          PyObject_HasAttrString(sparray, "data") &&
          PyObject_HasAttrString(sparray, "shape"))) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 2 : not a column compressed sparse matrix");
        return NULL;
      }
      
      /* fetch sparse attributes */
      PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray, "indptr");
      PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray, "indices");
      PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray, "data");
      PyObject* shape = PyObject_GetAttrString(sparray, "shape");
      
      /* check that types are OK */
      if (check_array(indptr,NPY_INT))
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indptr array should be 1d int's");
        return NULL;
      }
      
      if check_array(indices,NPY_INT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indices array should be 1d int's");
        return NULL;
      }
      
      if check_array(data, NPY_FLOAT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: data array should be 1d and match datatype");
        return NULL;
      }
      
      if (!PyTuple_Check(shape))
      {
        PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
        return NULL;
      }
      
      /* get array dimensions */
      int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
      int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
      
      
      int *pB = (int *)array_data(indptr);
      int *pE = pB + 1;
      int nzmax = (int)array_size(data,0);
      Py_DECREF(indptr);
      Py_DECREF(indices);
      Py_DECREF(data);
      Py_DECREF(shape);
      
      
      arg2 = new SpMatrix<float> ((float *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
      /*@SWIG@*/
    } else {
      PyArrayObject* array = NULL;
      /*@SWIG:py_typemaps.i,85,map_matrix@*/
      array = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
      /* !!!!!
      	WARNING! bug (?) : the variable name choosen above must not appear
      	in the string, otherwise swig will not correctly generate
      	final variable names (above name + number)
      	*/
      /* we cannot use require_fortran, because it convert a numpy C array to a numpy
      	fortran array by just modifying the strides */
      if (!array || !require_dimensions(array,2) || !array_is_fortran(array) || !require_native(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
      }
      arg2 = new Matrix<float> ((float *)array_data(array),(int)array_size(array,0),(int)array_size(array,1));
      
      /*@SWIG@*/
    }
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<float> ((float *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array4 = obj_to_array_no_conversion(swig_obj[3], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array4 to a numpy
    	fortran array4 by just modifying the strides */
    if (!array4 || !require_dimensions(array4,2) || !array_is_fortran(array4) || !require_native(array4)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 4 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg4 = new Matrix<float> ((float *)array_data(array4),(int)array_size(array4,0),(int)array_size(array4,1));
    
    /*@SWIG@*/
  }
  {
    array5 = obj_to_array_no_conversion(swig_obj[4], NPY_INT);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = new Vector<int> ((int *)array_data(array5),(int)array_size(array5,0));
  }
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fistaFlat" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fistaFlat" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_float(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fistaFlat" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fistaFlat" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_float(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fistaFlat" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = static_cast< float >(val10);
  ecode11 = SWIG_AsVal_float(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fistaFlat" "', argument " "11"" of type '" "float""'");
  } 
  arg11 = static_cast< float >(val11);
  ecode12 = SWIG_AsVal_float(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fistaFlat" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = static_cast< float >(val12);
  ecode13 = SWIG_AsVal_float(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fistaFlat" "', argument " "13"" of type '" "float""'");
  } 
  arg13 = static_cast< float >(val13);
  ecode14 = SWIG_AsVal_float(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "fistaFlat" "', argument " "14"" of type '" "float""'");
  } 
  arg14 = static_cast< float >(val14);
  ecode15 = SWIG_AsVal_float(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "fistaFlat" "', argument " "15"" of type '" "float""'");
  } 
  arg15 = static_cast< float >(val15);
  ecode16 = SWIG_AsVal_float(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "fistaFlat" "', argument " "16"" of type '" "float""'");
  } 
  arg16 = static_cast< float >(val16);
  ecode17 = SWIG_AsVal_float(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "fistaFlat" "', argument " "17"" of type '" "float""'");
  } 
  arg17 = static_cast< float >(val17);
  ecode18 = SWIG_AsVal_float(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "fistaFlat" "', argument " "18"" of type '" "float""'");
  } 
  arg18 = static_cast< float >(val18);
  ecode19 = SWIG_AsVal_int(swig_obj[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "fistaFlat" "', argument " "19"" of type '" "int""'");
  } 
  arg19 = static_cast< int >(val19);
  ecode20 = SWIG_AsVal_int(swig_obj[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "fistaFlat" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_bool(swig_obj[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "fistaFlat" "', argument " "21"" of type '" "bool""'");
  } 
  arg21 = static_cast< bool >(val21);
  ecode22 = SWIG_AsVal_bool(swig_obj[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "fistaFlat" "', argument " "22"" of type '" "bool""'");
  } 
  arg22 = static_cast< bool >(val22);
  ecode23 = SWIG_AsVal_bool(swig_obj[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "fistaFlat" "', argument " "23"" of type '" "bool""'");
  } 
  arg23 = static_cast< bool >(val23);
  ecode24 = SWIG_AsVal_bool(swig_obj[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "fistaFlat" "', argument " "24"" of type '" "bool""'");
  } 
  arg24 = static_cast< bool >(val24);
  ecode25 = SWIG_AsVal_bool(swig_obj[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "fistaFlat" "', argument " "25"" of type '" "bool""'");
  } 
  arg25 = static_cast< bool >(val25);
  res26 = SWIG_AsCharPtrAndSize(swig_obj[25], &buf26, NULL, &alloc26);
  if (!SWIG_IsOK(res26)) {
    SWIG_exception_fail(SWIG_ArgError(res26), "in method '" "fistaFlat" "', argument " "26"" of type '" "char *""'");
  }
  arg26 = reinterpret_cast< char * >(buf26);
  res27 = SWIG_AsCharPtrAndSize(swig_obj[26], &buf27, NULL, &alloc27);
  if (!SWIG_IsOK(res27)) {
    SWIG_exception_fail(SWIG_ArgError(res27), "in method '" "fistaFlat" "', argument " "27"" of type '" "char *""'");
  }
  arg27 = reinterpret_cast< char * >(buf27);
  ecode28 = SWIG_AsVal_bool(swig_obj[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "fistaFlat" "', argument " "28"" of type '" "bool""'");
  } 
  arg28 = static_cast< bool >(val28);
  ecode29 = SWIG_AsVal_bool(swig_obj[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "fistaFlat" "', argument " "29"" of type '" "bool""'");
  } 
  arg29 = static_cast< bool >(val29);
  ecode30 = SWIG_AsVal_bool(swig_obj[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "fistaFlat" "', argument " "30"" of type '" "bool""'");
  } 
  arg30 = static_cast< bool >(val30);
  ecode31 = SWIG_AsVal_bool(swig_obj[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "fistaFlat" "', argument " "31"" of type '" "bool""'");
  } 
  arg31 = static_cast< bool >(val31);
  ecode32 = SWIG_AsVal_bool(swig_obj[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "fistaFlat" "', argument " "32"" of type '" "bool""'");
  } 
  arg32 = static_cast< bool >(val32);
  ecode33 = SWIG_AsVal_bool(swig_obj[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "fistaFlat" "', argument " "33"" of type '" "bool""'");
  } 
  arg33 = static_cast< bool >(val33);
  res34 = SWIG_AsCharPtrAndSize(swig_obj[33], &buf34, NULL, &alloc34);
  if (!SWIG_IsOK(res34)) {
    SWIG_exception_fail(SWIG_ArgError(res34), "in method '" "fistaFlat" "', argument " "34"" of type '" "char *""'");
  }
  arg34 = reinterpret_cast< char * >(buf34);
  ecode35 = SWIG_AsVal_bool(swig_obj[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "fistaFlat" "', argument " "35"" of type '" "bool""'");
  } 
  arg35 = static_cast< bool >(val35);
  {
    array36 = obj_to_array_no_conversion(swig_obj[35], NPY_FLOAT);
    if (!array36 || !require_dimensions(array36,1) || !require_contiguous(array36) || !require_native(array36)) SWIG_fail;
    arg36 = new Vector<float> ((float *)array_data(array36),(int)array_size(array36,0));
  }
  ecode37 = SWIG_AsVal_int(swig_obj[36], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "fistaFlat" "', argument " "37"" of type '" "int""'");
  } 
  arg37 = static_cast< int >(val37);
  ecode38 = SWIG_AsVal_bool(swig_obj[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "fistaFlat" "', argument " "38"" of type '" "bool""'");
  } 
  arg38 = static_cast< bool >(val38);
  ecode39 = SWIG_AsVal_bool(swig_obj[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "fistaFlat" "', argument " "39"" of type '" "bool""'");
  } 
  arg39 = static_cast< bool >(val39);
  ecode40 = SWIG_AsVal_int(swig_obj[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "fistaFlat" "', argument " "40"" of type '" "int""'");
  } 
  arg40 = static_cast< int >(val40);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< float > *)_fistaFlat< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(float));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc26 == SWIG_NEWOBJ) delete[] buf26;
  if (alloc27 == SWIG_NEWOBJ) delete[] buf27;
  if (alloc34 == SWIG_NEWOBJ) delete[] buf34;
  {
    delete arg36;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc26 == SWIG_NEWOBJ) delete[] buf26;
  if (alloc27 == SWIG_NEWOBJ) delete[] buf27;
  if (alloc34 == SWIG_NEWOBJ) delete[] buf34;
  {
    delete arg36;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fistaFlat(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[41] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "fistaFlat", 0, 40, argv))) SWIG_fail;
  --argc;
  if (argc == 40) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        if( PyObject_HasAttrString(argv[1], "indptr"))
        _v = check_sparse(argv[1]);
        else
        _v = check_matrix(argv[1],NPY_FLOAT);
        
        
        
        
        
        
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 2) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[3]) && (array_numdims(argv[3]) == 2) && PyArray_EquivTypenums(array_type(argv[3]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[7], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[9], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[10], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[11], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[12], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[13], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[14], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[15], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[16], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[17], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[35]) && (array_numdims(argv[35]) == 1) && PyArray_EquivTypenums(array_type(argv[35]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_fistaFlat__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 40) {
    PyObject *retobj = _wrap_fistaFlat__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'fistaFlat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _fistaFlat< double >(Matrix< double > *,AbstractMatrixB< double > *,Matrix< double > *,Matrix< double > *,Vector< int > *,int,int,double,bool,double,double,double,double,double,double,double,double,double,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< double > *,int,bool,bool,int)\n"
    "    _fistaFlat< float >(Matrix< float > *,AbstractMatrixB< float > *,Matrix< float > *,Matrix< float > *,Vector< int > *,int,int,float,bool,float,float,float,float,float,float,float,float,float,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< float > *,int,bool,bool,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fistaTree__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  AbstractMatrixB< double > *arg2 = (AbstractMatrixB< double > *) 0 ;
  Matrix< double > *arg3 = (Matrix< double > *) 0 ;
  Matrix< double > *arg4 = (Matrix< double > *) 0 ;
  Vector< double > *arg5 = (Vector< double > *) 0 ;
  SpMatrix< bool > *arg6 = (SpMatrix< bool > *) 0 ;
  Vector< int > *arg7 = (Vector< int > *) 0 ;
  Vector< int > *arg8 = (Vector< int > *) 0 ;
  int arg9 ;
  int arg10 ;
  double arg11 ;
  bool arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  double arg17 ;
  double arg18 ;
  double arg19 ;
  double arg20 ;
  double arg21 ;
  int arg22 ;
  int arg23 ;
  bool arg24 ;
  bool arg25 ;
  bool arg26 ;
  bool arg27 ;
  bool arg28 ;
  char *arg29 = (char *) 0 ;
  char *arg30 = (char *) 0 ;
  bool arg31 ;
  bool arg32 ;
  bool arg33 ;
  bool arg34 ;
  bool arg35 ;
  bool arg36 ;
  char *arg37 = (char *) 0 ;
  bool arg38 ;
  Vector< double > *arg39 = (Vector< double > *) 0 ;
  int arg40 ;
  bool arg41 ;
  bool arg42 ;
  int arg43 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyObject *sparray6 = NULL ;
  PyArrayObject *array7 = NULL ;
  PyArrayObject *array8 = NULL ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  int val23 ;
  int ecode23 = 0 ;
  bool val24 ;
  int ecode24 = 0 ;
  bool val25 ;
  int ecode25 = 0 ;
  bool val26 ;
  int ecode26 = 0 ;
  bool val27 ;
  int ecode27 = 0 ;
  bool val28 ;
  int ecode28 = 0 ;
  int res29 ;
  char *buf29 = 0 ;
  int alloc29 = 0 ;
  int res30 ;
  char *buf30 = 0 ;
  int alloc30 = 0 ;
  bool val31 ;
  int ecode31 = 0 ;
  bool val32 ;
  int ecode32 = 0 ;
  bool val33 ;
  int ecode33 = 0 ;
  bool val34 ;
  int ecode34 = 0 ;
  bool val35 ;
  int ecode35 = 0 ;
  bool val36 ;
  int ecode36 = 0 ;
  int res37 ;
  char *buf37 = 0 ;
  int alloc37 = 0 ;
  bool val38 ;
  int ecode38 = 0 ;
  PyArrayObject *array39 = NULL ;
  int val40 ;
  int ecode40 = 0 ;
  bool val41 ;
  int ecode41 = 0 ;
  bool val42 ;
  int ecode42 = 0 ;
  int val43 ;
  int ecode43 = 0 ;
  Matrix< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 43) || (nobjs > 43)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    if ( PyObject_HasAttrString(swig_obj[1], "indptr")) {
      PyObject* sparray =swig_obj[1];
      /*@SWIG:py_typemaps.i,181,map_sparse@*/
      sparray = swig_obj[1];
      if ( !( PyObject_HasAttrString(sparray, "indptr") &&
          PyObject_HasAttrString(sparray, "indices") &&
          PyObject_HasAttrString(sparray, "data") &&
          PyObject_HasAttrString(sparray, "shape"))) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 2 : not a column compressed sparse matrix");
        return NULL;
      }
      
      /* fetch sparse attributes */
      PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray, "indptr");
      PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray, "indices");
      PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray, "data");
      PyObject* shape = PyObject_GetAttrString(sparray, "shape");
      
      /* check that types are OK */
      if (check_array(indptr,NPY_INT))
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indptr array should be 1d int's");
        return NULL;
      }
      
      if check_array(indices,NPY_INT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indices array should be 1d int's");
        return NULL;
      }
      
      if check_array(data, NPY_DOUBLE)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: data array should be 1d and match datatype");
        return NULL;
      }
      
      if (!PyTuple_Check(shape))
      {
        PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
        return NULL;
      }
      
      /* get array dimensions */
      int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
      int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
      
      
      int *pB = (int *)array_data(indptr);
      int *pE = pB + 1;
      int nzmax = (int)array_size(data,0);
      Py_DECREF(indptr);
      Py_DECREF(indices);
      Py_DECREF(data);
      Py_DECREF(shape);
      
      
      arg2 = new SpMatrix<double> ((double *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
      /*@SWIG@*/
    } else {
      PyArrayObject* array = NULL;
      /*@SWIG:py_typemaps.i,85,map_matrix@*/
      array = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
      /* !!!!!
      	WARNING! bug (?) : the variable name choosen above must not appear
      	in the string, otherwise swig will not correctly generate
      	final variable names (above name + number)
      	*/
      /* we cannot use require_fortran, because it convert a numpy C array to a numpy
      	fortran array by just modifying the strides */
      if (!array || !require_dimensions(array,2) || !array_is_fortran(array) || !require_native(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
      }
      arg2 = new Matrix<double> ((double *)array_data(array),(int)array_size(array,0),(int)array_size(array,1));
      
      /*@SWIG@*/
    }
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<double> ((double *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array4 = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array4 to a numpy
    	fortran array4 by just modifying the strides */
    if (!array4 || !require_dimensions(array4,2) || !array_is_fortran(array4) || !require_native(array4)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 4 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg4 = new Matrix<double> ((double *)array_data(array4),(int)array_size(array4,0),(int)array_size(array4,1));
    
    /*@SWIG@*/
  }
  {
    array5 = obj_to_array_no_conversion(swig_obj[4], NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = new Vector<double> ((double *)array_data(array5),(int)array_size(array5,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray6 = swig_obj[5];
    if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
        PyObject_HasAttrString(sparray6, "indices") &&
        PyObject_HasAttrString(sparray6, "data") &&
        PyObject_HasAttrString(sparray6, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 6 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray6, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray6, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray6, "data");
    PyObject* shape = PyObject_GetAttrString(sparray6, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg6 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    array7 = obj_to_array_no_conversion(swig_obj[6], NPY_INT);
    if (!array7 || !require_dimensions(array7,1) || !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = new Vector<int> ((int *)array_data(array7),(int)array_size(array7,0));
  }
  {
    array8 = obj_to_array_no_conversion(swig_obj[7], NPY_INT);
    if (!array8 || !require_dimensions(array8,1) || !require_contiguous(array8) || !require_native(array8)) SWIG_fail;
    arg8 = new Vector<int> ((int *)array_data(array8),(int)array_size(array8,0));
  }
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fistaTree" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fistaTree" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_double(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fistaTree" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_bool(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fistaTree" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  ecode13 = SWIG_AsVal_double(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fistaTree" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "fistaTree" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "fistaTree" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "fistaTree" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "fistaTree" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_double(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "fistaTree" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(swig_obj[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "fistaTree" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  ecode20 = SWIG_AsVal_double(swig_obj[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "fistaTree" "', argument " "20"" of type '" "double""'");
  } 
  arg20 = static_cast< double >(val20);
  ecode21 = SWIG_AsVal_double(swig_obj[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "fistaTree" "', argument " "21"" of type '" "double""'");
  } 
  arg21 = static_cast< double >(val21);
  ecode22 = SWIG_AsVal_int(swig_obj[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "fistaTree" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_int(swig_obj[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "fistaTree" "', argument " "23"" of type '" "int""'");
  } 
  arg23 = static_cast< int >(val23);
  ecode24 = SWIG_AsVal_bool(swig_obj[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "fistaTree" "', argument " "24"" of type '" "bool""'");
  } 
  arg24 = static_cast< bool >(val24);
  ecode25 = SWIG_AsVal_bool(swig_obj[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "fistaTree" "', argument " "25"" of type '" "bool""'");
  } 
  arg25 = static_cast< bool >(val25);
  ecode26 = SWIG_AsVal_bool(swig_obj[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "fistaTree" "', argument " "26"" of type '" "bool""'");
  } 
  arg26 = static_cast< bool >(val26);
  ecode27 = SWIG_AsVal_bool(swig_obj[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "fistaTree" "', argument " "27"" of type '" "bool""'");
  } 
  arg27 = static_cast< bool >(val27);
  ecode28 = SWIG_AsVal_bool(swig_obj[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "fistaTree" "', argument " "28"" of type '" "bool""'");
  } 
  arg28 = static_cast< bool >(val28);
  res29 = SWIG_AsCharPtrAndSize(swig_obj[28], &buf29, NULL, &alloc29);
  if (!SWIG_IsOK(res29)) {
    SWIG_exception_fail(SWIG_ArgError(res29), "in method '" "fistaTree" "', argument " "29"" of type '" "char *""'");
  }
  arg29 = reinterpret_cast< char * >(buf29);
  res30 = SWIG_AsCharPtrAndSize(swig_obj[29], &buf30, NULL, &alloc30);
  if (!SWIG_IsOK(res30)) {
    SWIG_exception_fail(SWIG_ArgError(res30), "in method '" "fistaTree" "', argument " "30"" of type '" "char *""'");
  }
  arg30 = reinterpret_cast< char * >(buf30);
  ecode31 = SWIG_AsVal_bool(swig_obj[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "fistaTree" "', argument " "31"" of type '" "bool""'");
  } 
  arg31 = static_cast< bool >(val31);
  ecode32 = SWIG_AsVal_bool(swig_obj[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "fistaTree" "', argument " "32"" of type '" "bool""'");
  } 
  arg32 = static_cast< bool >(val32);
  ecode33 = SWIG_AsVal_bool(swig_obj[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "fistaTree" "', argument " "33"" of type '" "bool""'");
  } 
  arg33 = static_cast< bool >(val33);
  ecode34 = SWIG_AsVal_bool(swig_obj[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "fistaTree" "', argument " "34"" of type '" "bool""'");
  } 
  arg34 = static_cast< bool >(val34);
  ecode35 = SWIG_AsVal_bool(swig_obj[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "fistaTree" "', argument " "35"" of type '" "bool""'");
  } 
  arg35 = static_cast< bool >(val35);
  ecode36 = SWIG_AsVal_bool(swig_obj[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "fistaTree" "', argument " "36"" of type '" "bool""'");
  } 
  arg36 = static_cast< bool >(val36);
  res37 = SWIG_AsCharPtrAndSize(swig_obj[36], &buf37, NULL, &alloc37);
  if (!SWIG_IsOK(res37)) {
    SWIG_exception_fail(SWIG_ArgError(res37), "in method '" "fistaTree" "', argument " "37"" of type '" "char *""'");
  }
  arg37 = reinterpret_cast< char * >(buf37);
  ecode38 = SWIG_AsVal_bool(swig_obj[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "fistaTree" "', argument " "38"" of type '" "bool""'");
  } 
  arg38 = static_cast< bool >(val38);
  {
    array39 = obj_to_array_no_conversion(swig_obj[38], NPY_DOUBLE);
    if (!array39 || !require_dimensions(array39,1) || !require_contiguous(array39) || !require_native(array39)) SWIG_fail;
    arg39 = new Vector<double> ((double *)array_data(array39),(int)array_size(array39,0));
  }
  ecode40 = SWIG_AsVal_int(swig_obj[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "fistaTree" "', argument " "40"" of type '" "int""'");
  } 
  arg40 = static_cast< int >(val40);
  ecode41 = SWIG_AsVal_bool(swig_obj[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "fistaTree" "', argument " "41"" of type '" "bool""'");
  } 
  arg41 = static_cast< bool >(val41);
  ecode42 = SWIG_AsVal_bool(swig_obj[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "fistaTree" "', argument " "42"" of type '" "bool""'");
  } 
  arg42 = static_cast< bool >(val42);
  ecode43 = SWIG_AsVal_int(swig_obj[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "fistaTree" "', argument " "43"" of type '" "int""'");
  } 
  arg43 = static_cast< int >(val43);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< double > *)_fistaTree< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(double));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  if (alloc29 == SWIG_NEWOBJ) delete[] buf29;
  if (alloc30 == SWIG_NEWOBJ) delete[] buf30;
  if (alloc37 == SWIG_NEWOBJ) delete[] buf37;
  {
    delete arg39;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  if (alloc29 == SWIG_NEWOBJ) delete[] buf29;
  if (alloc30 == SWIG_NEWOBJ) delete[] buf30;
  if (alloc37 == SWIG_NEWOBJ) delete[] buf37;
  {
    delete arg39;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fistaTree__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  AbstractMatrixB< float > *arg2 = (AbstractMatrixB< float > *) 0 ;
  Matrix< float > *arg3 = (Matrix< float > *) 0 ;
  Matrix< float > *arg4 = (Matrix< float > *) 0 ;
  Vector< float > *arg5 = (Vector< float > *) 0 ;
  SpMatrix< bool > *arg6 = (SpMatrix< bool > *) 0 ;
  Vector< int > *arg7 = (Vector< int > *) 0 ;
  Vector< int > *arg8 = (Vector< int > *) 0 ;
  int arg9 ;
  int arg10 ;
  float arg11 ;
  bool arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  float arg18 ;
  float arg19 ;
  float arg20 ;
  float arg21 ;
  int arg22 ;
  int arg23 ;
  bool arg24 ;
  bool arg25 ;
  bool arg26 ;
  bool arg27 ;
  bool arg28 ;
  char *arg29 = (char *) 0 ;
  char *arg30 = (char *) 0 ;
  bool arg31 ;
  bool arg32 ;
  bool arg33 ;
  bool arg34 ;
  bool arg35 ;
  bool arg36 ;
  char *arg37 = (char *) 0 ;
  bool arg38 ;
  Vector< float > *arg39 = (Vector< float > *) 0 ;
  int arg40 ;
  bool arg41 ;
  bool arg42 ;
  int arg43 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyObject *sparray6 = NULL ;
  PyArrayObject *array7 = NULL ;
  PyArrayObject *array8 = NULL ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  float val13 ;
  int ecode13 = 0 ;
  float val14 ;
  int ecode14 = 0 ;
  float val15 ;
  int ecode15 = 0 ;
  float val16 ;
  int ecode16 = 0 ;
  float val17 ;
  int ecode17 = 0 ;
  float val18 ;
  int ecode18 = 0 ;
  float val19 ;
  int ecode19 = 0 ;
  float val20 ;
  int ecode20 = 0 ;
  float val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  int val23 ;
  int ecode23 = 0 ;
  bool val24 ;
  int ecode24 = 0 ;
  bool val25 ;
  int ecode25 = 0 ;
  bool val26 ;
  int ecode26 = 0 ;
  bool val27 ;
  int ecode27 = 0 ;
  bool val28 ;
  int ecode28 = 0 ;
  int res29 ;
  char *buf29 = 0 ;
  int alloc29 = 0 ;
  int res30 ;
  char *buf30 = 0 ;
  int alloc30 = 0 ;
  bool val31 ;
  int ecode31 = 0 ;
  bool val32 ;
  int ecode32 = 0 ;
  bool val33 ;
  int ecode33 = 0 ;
  bool val34 ;
  int ecode34 = 0 ;
  bool val35 ;
  int ecode35 = 0 ;
  bool val36 ;
  int ecode36 = 0 ;
  int res37 ;
  char *buf37 = 0 ;
  int alloc37 = 0 ;
  bool val38 ;
  int ecode38 = 0 ;
  PyArrayObject *array39 = NULL ;
  int val40 ;
  int ecode40 = 0 ;
  bool val41 ;
  int ecode41 = 0 ;
  bool val42 ;
  int ecode42 = 0 ;
  int val43 ;
  int ecode43 = 0 ;
  Matrix< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 43) || (nobjs > 43)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    if ( PyObject_HasAttrString(swig_obj[1], "indptr")) {
      PyObject* sparray =swig_obj[1];
      /*@SWIG:py_typemaps.i,181,map_sparse@*/
      sparray = swig_obj[1];
      if ( !( PyObject_HasAttrString(sparray, "indptr") &&
          PyObject_HasAttrString(sparray, "indices") &&
          PyObject_HasAttrString(sparray, "data") &&
          PyObject_HasAttrString(sparray, "shape"))) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 2 : not a column compressed sparse matrix");
        return NULL;
      }
      
      /* fetch sparse attributes */
      PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray, "indptr");
      PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray, "indices");
      PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray, "data");
      PyObject* shape = PyObject_GetAttrString(sparray, "shape");
      
      /* check that types are OK */
      if (check_array(indptr,NPY_INT))
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indptr array should be 1d int's");
        return NULL;
      }
      
      if check_array(indices,NPY_INT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indices array should be 1d int's");
        return NULL;
      }
      
      if check_array(data, NPY_FLOAT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: data array should be 1d and match datatype");
        return NULL;
      }
      
      if (!PyTuple_Check(shape))
      {
        PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
        return NULL;
      }
      
      /* get array dimensions */
      int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
      int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
      
      
      int *pB = (int *)array_data(indptr);
      int *pE = pB + 1;
      int nzmax = (int)array_size(data,0);
      Py_DECREF(indptr);
      Py_DECREF(indices);
      Py_DECREF(data);
      Py_DECREF(shape);
      
      
      arg2 = new SpMatrix<float> ((float *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
      /*@SWIG@*/
    } else {
      PyArrayObject* array = NULL;
      /*@SWIG:py_typemaps.i,85,map_matrix@*/
      array = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
      /* !!!!!
      	WARNING! bug (?) : the variable name choosen above must not appear
      	in the string, otherwise swig will not correctly generate
      	final variable names (above name + number)
      	*/
      /* we cannot use require_fortran, because it convert a numpy C array to a numpy
      	fortran array by just modifying the strides */
      if (!array || !require_dimensions(array,2) || !array_is_fortran(array) || !require_native(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
      }
      arg2 = new Matrix<float> ((float *)array_data(array),(int)array_size(array,0),(int)array_size(array,1));
      
      /*@SWIG@*/
    }
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<float> ((float *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array4 = obj_to_array_no_conversion(swig_obj[3], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array4 to a numpy
    	fortran array4 by just modifying the strides */
    if (!array4 || !require_dimensions(array4,2) || !array_is_fortran(array4) || !require_native(array4)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 4 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg4 = new Matrix<float> ((float *)array_data(array4),(int)array_size(array4,0),(int)array_size(array4,1));
    
    /*@SWIG@*/
  }
  {
    array5 = obj_to_array_no_conversion(swig_obj[4], NPY_FLOAT);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = new Vector<float> ((float *)array_data(array5),(int)array_size(array5,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray6 = swig_obj[5];
    if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
        PyObject_HasAttrString(sparray6, "indices") &&
        PyObject_HasAttrString(sparray6, "data") &&
        PyObject_HasAttrString(sparray6, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 6 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray6, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray6, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray6, "data");
    PyObject* shape = PyObject_GetAttrString(sparray6, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg6 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    array7 = obj_to_array_no_conversion(swig_obj[6], NPY_INT);
    if (!array7 || !require_dimensions(array7,1) || !require_contiguous(array7) || !require_native(array7)) SWIG_fail;
    arg7 = new Vector<int> ((int *)array_data(array7),(int)array_size(array7,0));
  }
  {
    array8 = obj_to_array_no_conversion(swig_obj[7], NPY_INT);
    if (!array8 || !require_dimensions(array8,1) || !require_contiguous(array8) || !require_native(array8)) SWIG_fail;
    arg8 = new Vector<int> ((int *)array_data(array8),(int)array_size(array8,0));
  }
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fistaTree" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fistaTree" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_float(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fistaTree" "', argument " "11"" of type '" "float""'");
  } 
  arg11 = static_cast< float >(val11);
  ecode12 = SWIG_AsVal_bool(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fistaTree" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  ecode13 = SWIG_AsVal_float(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fistaTree" "', argument " "13"" of type '" "float""'");
  } 
  arg13 = static_cast< float >(val13);
  ecode14 = SWIG_AsVal_float(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "fistaTree" "', argument " "14"" of type '" "float""'");
  } 
  arg14 = static_cast< float >(val14);
  ecode15 = SWIG_AsVal_float(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "fistaTree" "', argument " "15"" of type '" "float""'");
  } 
  arg15 = static_cast< float >(val15);
  ecode16 = SWIG_AsVal_float(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "fistaTree" "', argument " "16"" of type '" "float""'");
  } 
  arg16 = static_cast< float >(val16);
  ecode17 = SWIG_AsVal_float(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "fistaTree" "', argument " "17"" of type '" "float""'");
  } 
  arg17 = static_cast< float >(val17);
  ecode18 = SWIG_AsVal_float(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "fistaTree" "', argument " "18"" of type '" "float""'");
  } 
  arg18 = static_cast< float >(val18);
  ecode19 = SWIG_AsVal_float(swig_obj[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "fistaTree" "', argument " "19"" of type '" "float""'");
  } 
  arg19 = static_cast< float >(val19);
  ecode20 = SWIG_AsVal_float(swig_obj[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "fistaTree" "', argument " "20"" of type '" "float""'");
  } 
  arg20 = static_cast< float >(val20);
  ecode21 = SWIG_AsVal_float(swig_obj[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "fistaTree" "', argument " "21"" of type '" "float""'");
  } 
  arg21 = static_cast< float >(val21);
  ecode22 = SWIG_AsVal_int(swig_obj[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "fistaTree" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_int(swig_obj[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "fistaTree" "', argument " "23"" of type '" "int""'");
  } 
  arg23 = static_cast< int >(val23);
  ecode24 = SWIG_AsVal_bool(swig_obj[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "fistaTree" "', argument " "24"" of type '" "bool""'");
  } 
  arg24 = static_cast< bool >(val24);
  ecode25 = SWIG_AsVal_bool(swig_obj[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "fistaTree" "', argument " "25"" of type '" "bool""'");
  } 
  arg25 = static_cast< bool >(val25);
  ecode26 = SWIG_AsVal_bool(swig_obj[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "fistaTree" "', argument " "26"" of type '" "bool""'");
  } 
  arg26 = static_cast< bool >(val26);
  ecode27 = SWIG_AsVal_bool(swig_obj[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "fistaTree" "', argument " "27"" of type '" "bool""'");
  } 
  arg27 = static_cast< bool >(val27);
  ecode28 = SWIG_AsVal_bool(swig_obj[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "fistaTree" "', argument " "28"" of type '" "bool""'");
  } 
  arg28 = static_cast< bool >(val28);
  res29 = SWIG_AsCharPtrAndSize(swig_obj[28], &buf29, NULL, &alloc29);
  if (!SWIG_IsOK(res29)) {
    SWIG_exception_fail(SWIG_ArgError(res29), "in method '" "fistaTree" "', argument " "29"" of type '" "char *""'");
  }
  arg29 = reinterpret_cast< char * >(buf29);
  res30 = SWIG_AsCharPtrAndSize(swig_obj[29], &buf30, NULL, &alloc30);
  if (!SWIG_IsOK(res30)) {
    SWIG_exception_fail(SWIG_ArgError(res30), "in method '" "fistaTree" "', argument " "30"" of type '" "char *""'");
  }
  arg30 = reinterpret_cast< char * >(buf30);
  ecode31 = SWIG_AsVal_bool(swig_obj[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "fistaTree" "', argument " "31"" of type '" "bool""'");
  } 
  arg31 = static_cast< bool >(val31);
  ecode32 = SWIG_AsVal_bool(swig_obj[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "fistaTree" "', argument " "32"" of type '" "bool""'");
  } 
  arg32 = static_cast< bool >(val32);
  ecode33 = SWIG_AsVal_bool(swig_obj[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "fistaTree" "', argument " "33"" of type '" "bool""'");
  } 
  arg33 = static_cast< bool >(val33);
  ecode34 = SWIG_AsVal_bool(swig_obj[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "fistaTree" "', argument " "34"" of type '" "bool""'");
  } 
  arg34 = static_cast< bool >(val34);
  ecode35 = SWIG_AsVal_bool(swig_obj[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "fistaTree" "', argument " "35"" of type '" "bool""'");
  } 
  arg35 = static_cast< bool >(val35);
  ecode36 = SWIG_AsVal_bool(swig_obj[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "fistaTree" "', argument " "36"" of type '" "bool""'");
  } 
  arg36 = static_cast< bool >(val36);
  res37 = SWIG_AsCharPtrAndSize(swig_obj[36], &buf37, NULL, &alloc37);
  if (!SWIG_IsOK(res37)) {
    SWIG_exception_fail(SWIG_ArgError(res37), "in method '" "fistaTree" "', argument " "37"" of type '" "char *""'");
  }
  arg37 = reinterpret_cast< char * >(buf37);
  ecode38 = SWIG_AsVal_bool(swig_obj[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "fistaTree" "', argument " "38"" of type '" "bool""'");
  } 
  arg38 = static_cast< bool >(val38);
  {
    array39 = obj_to_array_no_conversion(swig_obj[38], NPY_FLOAT);
    if (!array39 || !require_dimensions(array39,1) || !require_contiguous(array39) || !require_native(array39)) SWIG_fail;
    arg39 = new Vector<float> ((float *)array_data(array39),(int)array_size(array39,0));
  }
  ecode40 = SWIG_AsVal_int(swig_obj[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "fistaTree" "', argument " "40"" of type '" "int""'");
  } 
  arg40 = static_cast< int >(val40);
  ecode41 = SWIG_AsVal_bool(swig_obj[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "fistaTree" "', argument " "41"" of type '" "bool""'");
  } 
  arg41 = static_cast< bool >(val41);
  ecode42 = SWIG_AsVal_bool(swig_obj[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "fistaTree" "', argument " "42"" of type '" "bool""'");
  } 
  arg42 = static_cast< bool >(val42);
  ecode43 = SWIG_AsVal_int(swig_obj[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "fistaTree" "', argument " "43"" of type '" "int""'");
  } 
  arg43 = static_cast< int >(val43);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< float > *)_fistaTree< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(float));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  if (alloc29 == SWIG_NEWOBJ) delete[] buf29;
  if (alloc30 == SWIG_NEWOBJ) delete[] buf30;
  if (alloc37 == SWIG_NEWOBJ) delete[] buf37;
  {
    delete arg39;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  {
    delete arg8;
  }
  if (alloc29 == SWIG_NEWOBJ) delete[] buf29;
  if (alloc30 == SWIG_NEWOBJ) delete[] buf30;
  if (alloc37 == SWIG_NEWOBJ) delete[] buf37;
  {
    delete arg39;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fistaTree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[44] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "fistaTree", 0, 43, argv))) SWIG_fail;
  --argc;
  if (argc == 43) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        if( PyObject_HasAttrString(argv[1], "indptr"))
        _v = check_sparse(argv[1]);
        else
        _v = check_matrix(argv[1],NPY_FLOAT);
        
        
        
        
        
        
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 2) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[3]) && (array_numdims(argv[3]) == 2) && PyArray_EquivTypenums(array_type(argv[3]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[4]) && (array_numdims(argv[4]) == 1) && PyArray_EquivTypenums(array_type(argv[4]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[10], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[12], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[13], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[14], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[15], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[16], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[17], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[18], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[19], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[20], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[38]) && (array_numdims(argv[38]) == 1) && PyArray_EquivTypenums(array_type(argv[38]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_fistaTree__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 43) {
    PyObject *retobj = _wrap_fistaTree__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'fistaTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _fistaTree< double >(Matrix< double > *,AbstractMatrixB< double > *,Matrix< double > *,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,int,double,bool,double,double,double,double,double,double,double,double,double,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< double > *,int,bool,bool,int)\n"
    "    _fistaTree< float >(Matrix< float > *,AbstractMatrixB< float > *,Matrix< float > *,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,int,float,bool,float,float,float,float,float,float,float,float,float,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< float > *,int,bool,bool,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  AbstractMatrixB< double > *arg2 = (AbstractMatrixB< double > *) 0 ;
  Matrix< double > *arg3 = (Matrix< double > *) 0 ;
  Matrix< double > *arg4 = (Matrix< double > *) 0 ;
  Vector< double > *arg5 = (Vector< double > *) 0 ;
  SpMatrix< bool > *arg6 = (SpMatrix< bool > *) 0 ;
  SpMatrix< bool > *arg7 = (SpMatrix< bool > *) 0 ;
  int arg8 ;
  int arg9 ;
  double arg10 ;
  bool arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  double arg17 ;
  double arg18 ;
  double arg19 ;
  double arg20 ;
  int arg21 ;
  int arg22 ;
  bool arg23 ;
  bool arg24 ;
  bool arg25 ;
  bool arg26 ;
  bool arg27 ;
  char *arg28 = (char *) 0 ;
  char *arg29 = (char *) 0 ;
  bool arg30 ;
  bool arg31 ;
  bool arg32 ;
  bool arg33 ;
  bool arg34 ;
  bool arg35 ;
  char *arg36 = (char *) 0 ;
  bool arg37 ;
  Vector< double > *arg38 = (Vector< double > *) 0 ;
  int arg39 ;
  bool arg40 ;
  bool arg41 ;
  int arg42 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyObject *sparray6 = NULL ;
  PyObject *sparray7 = NULL ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  bool val23 ;
  int ecode23 = 0 ;
  bool val24 ;
  int ecode24 = 0 ;
  bool val25 ;
  int ecode25 = 0 ;
  bool val26 ;
  int ecode26 = 0 ;
  bool val27 ;
  int ecode27 = 0 ;
  int res28 ;
  char *buf28 = 0 ;
  int alloc28 = 0 ;
  int res29 ;
  char *buf29 = 0 ;
  int alloc29 = 0 ;
  bool val30 ;
  int ecode30 = 0 ;
  bool val31 ;
  int ecode31 = 0 ;
  bool val32 ;
  int ecode32 = 0 ;
  bool val33 ;
  int ecode33 = 0 ;
  bool val34 ;
  int ecode34 = 0 ;
  bool val35 ;
  int ecode35 = 0 ;
  int res36 ;
  char *buf36 = 0 ;
  int alloc36 = 0 ;
  bool val37 ;
  int ecode37 = 0 ;
  PyArrayObject *array38 = NULL ;
  int val39 ;
  int ecode39 = 0 ;
  bool val40 ;
  int ecode40 = 0 ;
  bool val41 ;
  int ecode41 = 0 ;
  int val42 ;
  int ecode42 = 0 ;
  Matrix< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 42) || (nobjs > 42)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    if ( PyObject_HasAttrString(swig_obj[1], "indptr")) {
      PyObject* sparray =swig_obj[1];
      /*@SWIG:py_typemaps.i,181,map_sparse@*/
      sparray = swig_obj[1];
      if ( !( PyObject_HasAttrString(sparray, "indptr") &&
          PyObject_HasAttrString(sparray, "indices") &&
          PyObject_HasAttrString(sparray, "data") &&
          PyObject_HasAttrString(sparray, "shape"))) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 2 : not a column compressed sparse matrix");
        return NULL;
      }
      
      /* fetch sparse attributes */
      PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray, "indptr");
      PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray, "indices");
      PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray, "data");
      PyObject* shape = PyObject_GetAttrString(sparray, "shape");
      
      /* check that types are OK */
      if (check_array(indptr,NPY_INT))
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indptr array should be 1d int's");
        return NULL;
      }
      
      if check_array(indices,NPY_INT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indices array should be 1d int's");
        return NULL;
      }
      
      if check_array(data, NPY_DOUBLE)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: data array should be 1d and match datatype");
        return NULL;
      }
      
      if (!PyTuple_Check(shape))
      {
        PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
        return NULL;
      }
      
      /* get array dimensions */
      int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
      int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
      
      
      int *pB = (int *)array_data(indptr);
      int *pE = pB + 1;
      int nzmax = (int)array_size(data,0);
      Py_DECREF(indptr);
      Py_DECREF(indices);
      Py_DECREF(data);
      Py_DECREF(shape);
      
      
      arg2 = new SpMatrix<double> ((double *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
      /*@SWIG@*/
    } else {
      PyArrayObject* array = NULL;
      /*@SWIG:py_typemaps.i,85,map_matrix@*/
      array = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
      /* !!!!!
      	WARNING! bug (?) : the variable name choosen above must not appear
      	in the string, otherwise swig will not correctly generate
      	final variable names (above name + number)
      	*/
      /* we cannot use require_fortran, because it convert a numpy C array to a numpy
      	fortran array by just modifying the strides */
      if (!array || !require_dimensions(array,2) || !array_is_fortran(array) || !require_native(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
      }
      arg2 = new Matrix<double> ((double *)array_data(array),(int)array_size(array,0),(int)array_size(array,1));
      
      /*@SWIG@*/
    }
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<double> ((double *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array4 = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array4 to a numpy
    	fortran array4 by just modifying the strides */
    if (!array4 || !require_dimensions(array4,2) || !array_is_fortran(array4) || !require_native(array4)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 4 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg4 = new Matrix<double> ((double *)array_data(array4),(int)array_size(array4,0),(int)array_size(array4,1));
    
    /*@SWIG@*/
  }
  {
    array5 = obj_to_array_no_conversion(swig_obj[4], NPY_DOUBLE);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = new Vector<double> ((double *)array_data(array5),(int)array_size(array5,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray6 = swig_obj[5];
    if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
        PyObject_HasAttrString(sparray6, "indices") &&
        PyObject_HasAttrString(sparray6, "data") &&
        PyObject_HasAttrString(sparray6, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 6 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray6, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray6, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray6, "data");
    PyObject* shape = PyObject_GetAttrString(sparray6, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg6 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray7 = swig_obj[6];
    if ( !( PyObject_HasAttrString(sparray7, "indptr") &&
        PyObject_HasAttrString(sparray7, "indices") &&
        PyObject_HasAttrString(sparray7, "data") &&
        PyObject_HasAttrString(sparray7, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 7 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray7, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray7, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray7, "data");
    PyObject* shape = PyObject_GetAttrString(sparray7, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg7: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg7: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg7: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg7 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fistaGraph" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fistaGraph" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_double(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fistaGraph" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fistaGraph" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_double(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fistaGraph" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fistaGraph" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "fistaGraph" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "fistaGraph" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "fistaGraph" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "fistaGraph" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_double(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "fistaGraph" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(swig_obj[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "fistaGraph" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  ecode20 = SWIG_AsVal_double(swig_obj[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "fistaGraph" "', argument " "20"" of type '" "double""'");
  } 
  arg20 = static_cast< double >(val20);
  ecode21 = SWIG_AsVal_int(swig_obj[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "fistaGraph" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(swig_obj[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "fistaGraph" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_bool(swig_obj[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "fistaGraph" "', argument " "23"" of type '" "bool""'");
  } 
  arg23 = static_cast< bool >(val23);
  ecode24 = SWIG_AsVal_bool(swig_obj[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "fistaGraph" "', argument " "24"" of type '" "bool""'");
  } 
  arg24 = static_cast< bool >(val24);
  ecode25 = SWIG_AsVal_bool(swig_obj[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "fistaGraph" "', argument " "25"" of type '" "bool""'");
  } 
  arg25 = static_cast< bool >(val25);
  ecode26 = SWIG_AsVal_bool(swig_obj[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "fistaGraph" "', argument " "26"" of type '" "bool""'");
  } 
  arg26 = static_cast< bool >(val26);
  ecode27 = SWIG_AsVal_bool(swig_obj[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "fistaGraph" "', argument " "27"" of type '" "bool""'");
  } 
  arg27 = static_cast< bool >(val27);
  res28 = SWIG_AsCharPtrAndSize(swig_obj[27], &buf28, NULL, &alloc28);
  if (!SWIG_IsOK(res28)) {
    SWIG_exception_fail(SWIG_ArgError(res28), "in method '" "fistaGraph" "', argument " "28"" of type '" "char *""'");
  }
  arg28 = reinterpret_cast< char * >(buf28);
  res29 = SWIG_AsCharPtrAndSize(swig_obj[28], &buf29, NULL, &alloc29);
  if (!SWIG_IsOK(res29)) {
    SWIG_exception_fail(SWIG_ArgError(res29), "in method '" "fistaGraph" "', argument " "29"" of type '" "char *""'");
  }
  arg29 = reinterpret_cast< char * >(buf29);
  ecode30 = SWIG_AsVal_bool(swig_obj[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "fistaGraph" "', argument " "30"" of type '" "bool""'");
  } 
  arg30 = static_cast< bool >(val30);
  ecode31 = SWIG_AsVal_bool(swig_obj[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "fistaGraph" "', argument " "31"" of type '" "bool""'");
  } 
  arg31 = static_cast< bool >(val31);
  ecode32 = SWIG_AsVal_bool(swig_obj[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "fistaGraph" "', argument " "32"" of type '" "bool""'");
  } 
  arg32 = static_cast< bool >(val32);
  ecode33 = SWIG_AsVal_bool(swig_obj[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "fistaGraph" "', argument " "33"" of type '" "bool""'");
  } 
  arg33 = static_cast< bool >(val33);
  ecode34 = SWIG_AsVal_bool(swig_obj[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "fistaGraph" "', argument " "34"" of type '" "bool""'");
  } 
  arg34 = static_cast< bool >(val34);
  ecode35 = SWIG_AsVal_bool(swig_obj[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "fistaGraph" "', argument " "35"" of type '" "bool""'");
  } 
  arg35 = static_cast< bool >(val35);
  res36 = SWIG_AsCharPtrAndSize(swig_obj[35], &buf36, NULL, &alloc36);
  if (!SWIG_IsOK(res36)) {
    SWIG_exception_fail(SWIG_ArgError(res36), "in method '" "fistaGraph" "', argument " "36"" of type '" "char *""'");
  }
  arg36 = reinterpret_cast< char * >(buf36);
  ecode37 = SWIG_AsVal_bool(swig_obj[36], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "fistaGraph" "', argument " "37"" of type '" "bool""'");
  } 
  arg37 = static_cast< bool >(val37);
  {
    array38 = obj_to_array_no_conversion(swig_obj[37], NPY_DOUBLE);
    if (!array38 || !require_dimensions(array38,1) || !require_contiguous(array38) || !require_native(array38)) SWIG_fail;
    arg38 = new Vector<double> ((double *)array_data(array38),(int)array_size(array38,0));
  }
  ecode39 = SWIG_AsVal_int(swig_obj[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "fistaGraph" "', argument " "39"" of type '" "int""'");
  } 
  arg39 = static_cast< int >(val39);
  ecode40 = SWIG_AsVal_bool(swig_obj[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "fistaGraph" "', argument " "40"" of type '" "bool""'");
  } 
  arg40 = static_cast< bool >(val40);
  ecode41 = SWIG_AsVal_bool(swig_obj[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "fistaGraph" "', argument " "41"" of type '" "bool""'");
  } 
  arg41 = static_cast< bool >(val41);
  ecode42 = SWIG_AsVal_int(swig_obj[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "fistaGraph" "', argument " "42"" of type '" "int""'");
  } 
  arg42 = static_cast< int >(val42);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< double > *)_fistaGraph< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(double));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc28 == SWIG_NEWOBJ) delete[] buf28;
  if (alloc29 == SWIG_NEWOBJ) delete[] buf29;
  if (alloc36 == SWIG_NEWOBJ) delete[] buf36;
  {
    delete arg38;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc28 == SWIG_NEWOBJ) delete[] buf28;
  if (alloc29 == SWIG_NEWOBJ) delete[] buf29;
  if (alloc36 == SWIG_NEWOBJ) delete[] buf36;
  {
    delete arg38;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fistaGraph__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  AbstractMatrixB< float > *arg2 = (AbstractMatrixB< float > *) 0 ;
  Matrix< float > *arg3 = (Matrix< float > *) 0 ;
  Matrix< float > *arg4 = (Matrix< float > *) 0 ;
  Vector< float > *arg5 = (Vector< float > *) 0 ;
  SpMatrix< bool > *arg6 = (SpMatrix< bool > *) 0 ;
  SpMatrix< bool > *arg7 = (SpMatrix< bool > *) 0 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  float arg18 ;
  float arg19 ;
  float arg20 ;
  int arg21 ;
  int arg22 ;
  bool arg23 ;
  bool arg24 ;
  bool arg25 ;
  bool arg26 ;
  bool arg27 ;
  char *arg28 = (char *) 0 ;
  char *arg29 = (char *) 0 ;
  bool arg30 ;
  bool arg31 ;
  bool arg32 ;
  bool arg33 ;
  bool arg34 ;
  bool arg35 ;
  char *arg36 = (char *) 0 ;
  bool arg37 ;
  Vector< float > *arg38 = (Vector< float > *) 0 ;
  int arg39 ;
  bool arg40 ;
  bool arg41 ;
  int arg42 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyArrayObject *array4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyObject *sparray6 = NULL ;
  PyObject *sparray7 = NULL ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  float val12 ;
  int ecode12 = 0 ;
  float val13 ;
  int ecode13 = 0 ;
  float val14 ;
  int ecode14 = 0 ;
  float val15 ;
  int ecode15 = 0 ;
  float val16 ;
  int ecode16 = 0 ;
  float val17 ;
  int ecode17 = 0 ;
  float val18 ;
  int ecode18 = 0 ;
  float val19 ;
  int ecode19 = 0 ;
  float val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  bool val23 ;
  int ecode23 = 0 ;
  bool val24 ;
  int ecode24 = 0 ;
  bool val25 ;
  int ecode25 = 0 ;
  bool val26 ;
  int ecode26 = 0 ;
  bool val27 ;
  int ecode27 = 0 ;
  int res28 ;
  char *buf28 = 0 ;
  int alloc28 = 0 ;
  int res29 ;
  char *buf29 = 0 ;
  int alloc29 = 0 ;
  bool val30 ;
  int ecode30 = 0 ;
  bool val31 ;
  int ecode31 = 0 ;
  bool val32 ;
  int ecode32 = 0 ;
  bool val33 ;
  int ecode33 = 0 ;
  bool val34 ;
  int ecode34 = 0 ;
  bool val35 ;
  int ecode35 = 0 ;
  int res36 ;
  char *buf36 = 0 ;
  int alloc36 = 0 ;
  bool val37 ;
  int ecode37 = 0 ;
  PyArrayObject *array38 = NULL ;
  int val39 ;
  int ecode39 = 0 ;
  bool val40 ;
  int ecode40 = 0 ;
  bool val41 ;
  int ecode41 = 0 ;
  int val42 ;
  int ecode42 = 0 ;
  Matrix< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 42) || (nobjs > 42)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    if ( PyObject_HasAttrString(swig_obj[1], "indptr")) {
      PyObject* sparray =swig_obj[1];
      /*@SWIG:py_typemaps.i,181,map_sparse@*/
      sparray = swig_obj[1];
      if ( !( PyObject_HasAttrString(sparray, "indptr") &&
          PyObject_HasAttrString(sparray, "indices") &&
          PyObject_HasAttrString(sparray, "data") &&
          PyObject_HasAttrString(sparray, "shape"))) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 2 : not a column compressed sparse matrix");
        return NULL;
      }
      
      /* fetch sparse attributes */
      PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray, "indptr");
      PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray, "indices");
      PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray, "data");
      PyObject* shape = PyObject_GetAttrString(sparray, "shape");
      
      /* check that types are OK */
      if (check_array(indptr,NPY_INT))
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indptr array should be 1d int's");
        return NULL;
      }
      
      if check_array(indices,NPY_INT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: indices array should be 1d int's");
        return NULL;
      }
      
      if check_array(data, NPY_FLOAT)
      {
        PyErr_SetString(PyExc_TypeError,"spmatrix arg2: data array should be 1d and match datatype");
        return NULL;
      }
      
      if (!PyTuple_Check(shape))
      {
        PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
        return NULL;
      }
      
      /* get array dimensions */
      int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
      int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
      
      
      int *pB = (int *)array_data(indptr);
      int *pE = pB + 1;
      int nzmax = (int)array_size(data,0);
      Py_DECREF(indptr);
      Py_DECREF(indices);
      Py_DECREF(data);
      Py_DECREF(shape);
      
      
      arg2 = new SpMatrix<float> ((float *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
      /*@SWIG@*/
    } else {
      PyArrayObject* array = NULL;
      /*@SWIG:py_typemaps.i,85,map_matrix@*/
      array = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
      /* !!!!!
      	WARNING! bug (?) : the variable name choosen above must not appear
      	in the string, otherwise swig will not correctly generate
      	final variable names (above name + number)
      	*/
      /* we cannot use require_fortran, because it convert a numpy C array to a numpy
      	fortran array by just modifying the strides */
      if (!array || !require_dimensions(array,2) || !array_is_fortran(array) || !require_native(array)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
      }
      arg2 = new Matrix<float> ((float *)array_data(array),(int)array_size(array,0),(int)array_size(array,1));
      
      /*@SWIG@*/
    }
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array3 to a numpy
    	fortran array3 by just modifying the strides */
    if (!array3 || !require_dimensions(array3,2) || !array_is_fortran(array3) || !require_native(array3)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 3 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg3 = new Matrix<float> ((float *)array_data(array3),(int)array_size(array3,0),(int)array_size(array3,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array4 = obj_to_array_no_conversion(swig_obj[3], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array4 to a numpy
    	fortran array4 by just modifying the strides */
    if (!array4 || !require_dimensions(array4,2) || !array_is_fortran(array4) || !require_native(array4)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 4 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg4 = new Matrix<float> ((float *)array_data(array4),(int)array_size(array4,0),(int)array_size(array4,1));
    
    /*@SWIG@*/
  }
  {
    array5 = obj_to_array_no_conversion(swig_obj[4], NPY_FLOAT);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = new Vector<float> ((float *)array_data(array5),(int)array_size(array5,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray6 = swig_obj[5];
    if ( !( PyObject_HasAttrString(sparray6, "indptr") &&
        PyObject_HasAttrString(sparray6, "indices") &&
        PyObject_HasAttrString(sparray6, "data") &&
        PyObject_HasAttrString(sparray6, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 6 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray6, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray6, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray6, "data");
    PyObject* shape = PyObject_GetAttrString(sparray6, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg6: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg6 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray7 = swig_obj[6];
    if ( !( PyObject_HasAttrString(sparray7, "indptr") &&
        PyObject_HasAttrString(sparray7, "indices") &&
        PyObject_HasAttrString(sparray7, "data") &&
        PyObject_HasAttrString(sparray7, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 7 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray7, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray7, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray7, "data");
    PyObject* shape = PyObject_GetAttrString(sparray7, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg7: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg7: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg7: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg7 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fistaGraph" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fistaGraph" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_float(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "fistaGraph" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = static_cast< float >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "fistaGraph" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_float(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "fistaGraph" "', argument " "12"" of type '" "float""'");
  } 
  arg12 = static_cast< float >(val12);
  ecode13 = SWIG_AsVal_float(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "fistaGraph" "', argument " "13"" of type '" "float""'");
  } 
  arg13 = static_cast< float >(val13);
  ecode14 = SWIG_AsVal_float(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "fistaGraph" "', argument " "14"" of type '" "float""'");
  } 
  arg14 = static_cast< float >(val14);
  ecode15 = SWIG_AsVal_float(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "fistaGraph" "', argument " "15"" of type '" "float""'");
  } 
  arg15 = static_cast< float >(val15);
  ecode16 = SWIG_AsVal_float(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "fistaGraph" "', argument " "16"" of type '" "float""'");
  } 
  arg16 = static_cast< float >(val16);
  ecode17 = SWIG_AsVal_float(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "fistaGraph" "', argument " "17"" of type '" "float""'");
  } 
  arg17 = static_cast< float >(val17);
  ecode18 = SWIG_AsVal_float(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "fistaGraph" "', argument " "18"" of type '" "float""'");
  } 
  arg18 = static_cast< float >(val18);
  ecode19 = SWIG_AsVal_float(swig_obj[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "fistaGraph" "', argument " "19"" of type '" "float""'");
  } 
  arg19 = static_cast< float >(val19);
  ecode20 = SWIG_AsVal_float(swig_obj[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "fistaGraph" "', argument " "20"" of type '" "float""'");
  } 
  arg20 = static_cast< float >(val20);
  ecode21 = SWIG_AsVal_int(swig_obj[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "fistaGraph" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(swig_obj[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "fistaGraph" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_bool(swig_obj[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "fistaGraph" "', argument " "23"" of type '" "bool""'");
  } 
  arg23 = static_cast< bool >(val23);
  ecode24 = SWIG_AsVal_bool(swig_obj[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "fistaGraph" "', argument " "24"" of type '" "bool""'");
  } 
  arg24 = static_cast< bool >(val24);
  ecode25 = SWIG_AsVal_bool(swig_obj[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "fistaGraph" "', argument " "25"" of type '" "bool""'");
  } 
  arg25 = static_cast< bool >(val25);
  ecode26 = SWIG_AsVal_bool(swig_obj[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "fistaGraph" "', argument " "26"" of type '" "bool""'");
  } 
  arg26 = static_cast< bool >(val26);
  ecode27 = SWIG_AsVal_bool(swig_obj[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "fistaGraph" "', argument " "27"" of type '" "bool""'");
  } 
  arg27 = static_cast< bool >(val27);
  res28 = SWIG_AsCharPtrAndSize(swig_obj[27], &buf28, NULL, &alloc28);
  if (!SWIG_IsOK(res28)) {
    SWIG_exception_fail(SWIG_ArgError(res28), "in method '" "fistaGraph" "', argument " "28"" of type '" "char *""'");
  }
  arg28 = reinterpret_cast< char * >(buf28);
  res29 = SWIG_AsCharPtrAndSize(swig_obj[28], &buf29, NULL, &alloc29);
  if (!SWIG_IsOK(res29)) {
    SWIG_exception_fail(SWIG_ArgError(res29), "in method '" "fistaGraph" "', argument " "29"" of type '" "char *""'");
  }
  arg29 = reinterpret_cast< char * >(buf29);
  ecode30 = SWIG_AsVal_bool(swig_obj[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "fistaGraph" "', argument " "30"" of type '" "bool""'");
  } 
  arg30 = static_cast< bool >(val30);
  ecode31 = SWIG_AsVal_bool(swig_obj[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "fistaGraph" "', argument " "31"" of type '" "bool""'");
  } 
  arg31 = static_cast< bool >(val31);
  ecode32 = SWIG_AsVal_bool(swig_obj[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "fistaGraph" "', argument " "32"" of type '" "bool""'");
  } 
  arg32 = static_cast< bool >(val32);
  ecode33 = SWIG_AsVal_bool(swig_obj[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "fistaGraph" "', argument " "33"" of type '" "bool""'");
  } 
  arg33 = static_cast< bool >(val33);
  ecode34 = SWIG_AsVal_bool(swig_obj[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "fistaGraph" "', argument " "34"" of type '" "bool""'");
  } 
  arg34 = static_cast< bool >(val34);
  ecode35 = SWIG_AsVal_bool(swig_obj[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "fistaGraph" "', argument " "35"" of type '" "bool""'");
  } 
  arg35 = static_cast< bool >(val35);
  res36 = SWIG_AsCharPtrAndSize(swig_obj[35], &buf36, NULL, &alloc36);
  if (!SWIG_IsOK(res36)) {
    SWIG_exception_fail(SWIG_ArgError(res36), "in method '" "fistaGraph" "', argument " "36"" of type '" "char *""'");
  }
  arg36 = reinterpret_cast< char * >(buf36);
  ecode37 = SWIG_AsVal_bool(swig_obj[36], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "fistaGraph" "', argument " "37"" of type '" "bool""'");
  } 
  arg37 = static_cast< bool >(val37);
  {
    array38 = obj_to_array_no_conversion(swig_obj[37], NPY_FLOAT);
    if (!array38 || !require_dimensions(array38,1) || !require_contiguous(array38) || !require_native(array38)) SWIG_fail;
    arg38 = new Vector<float> ((float *)array_data(array38),(int)array_size(array38,0));
  }
  ecode39 = SWIG_AsVal_int(swig_obj[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "fistaGraph" "', argument " "39"" of type '" "int""'");
  } 
  arg39 = static_cast< int >(val39);
  ecode40 = SWIG_AsVal_bool(swig_obj[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "fistaGraph" "', argument " "40"" of type '" "bool""'");
  } 
  arg40 = static_cast< bool >(val40);
  ecode41 = SWIG_AsVal_bool(swig_obj[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "fistaGraph" "', argument " "41"" of type '" "bool""'");
  } 
  arg41 = static_cast< bool >(val41);
  ecode42 = SWIG_AsVal_int(swig_obj[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "fistaGraph" "', argument " "42"" of type '" "int""'");
  } 
  arg42 = static_cast< int >(val42);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Matrix< float > *)_fistaGraph< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp m = result->m();
    npy_intp n = result->n();
    npy_intp dims[2] = {
      m,n
    };
    
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(2, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,m * n * sizeof(float));
    delete result;
    if (! require_fortran(array)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"Cannot make a fortran out matrix"); SWIG_fail;
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc28 == SWIG_NEWOBJ) delete[] buf28;
  if (alloc29 == SWIG_NEWOBJ) delete[] buf29;
  if (alloc36 == SWIG_NEWOBJ) delete[] buf36;
  {
    delete arg38;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  {
    delete arg7;
  }
  if (alloc28 == SWIG_NEWOBJ) delete[] buf28;
  if (alloc29 == SWIG_NEWOBJ) delete[] buf29;
  if (alloc36 == SWIG_NEWOBJ) delete[] buf36;
  {
    delete arg38;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fistaGraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[43] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "fistaGraph", 0, 42, argv))) SWIG_fail;
  --argc;
  if (argc == 42) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        if( PyObject_HasAttrString(argv[1], "indptr"))
        _v = check_sparse(argv[1]);
        else
        _v = check_matrix(argv[1],NPY_FLOAT);
        
        
        
        
        
        
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 2) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[3]) && (array_numdims(argv[3]) == 2) && PyArray_EquivTypenums(array_type(argv[3]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[4]) && (array_numdims(argv[4]) == 1) && PyArray_EquivTypenums(array_type(argv[4]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[9], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[11], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[12], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[13], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[14], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[15], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[16], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[17], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[18], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[19], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[37]) && (array_numdims(argv[37]) == 1) && PyArray_EquivTypenums(array_type(argv[37]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_fistaGraph__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 42) {
    PyObject *retobj = _wrap_fistaGraph__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'fistaGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _fistaGraph< double >(Matrix< double > *,AbstractMatrixB< double > *,Matrix< double > *,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,SpMatrix< bool > *,int,int,double,bool,double,double,double,double,double,double,double,double,double,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< double > *,int,bool,bool,int)\n"
    "    _fistaGraph< float >(Matrix< float > *,AbstractMatrixB< float > *,Matrix< float > *,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,SpMatrix< bool > *,int,int,float,bool,float,float,float,float,float,float,float,float,float,int,int,bool,bool,bool,bool,bool,char *,char *,bool,bool,bool,bool,bool,bool,char *,bool,Vector< float > *,int,bool,bool,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_proximalFlat__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Vector< int > *arg3 = (Vector< int > *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  bool arg8 ;
  bool arg9 ;
  char *arg10 = (char *) 0 ;
  bool arg11 ;
  bool arg12 ;
  bool arg13 ;
  bool arg14 ;
  int arg15 ;
  bool arg16 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  bool val13 ;
  int ecode13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  int val15 ;
  int ecode15 = 0 ;
  bool val16 ;
  int ecode16 = 0 ;
  Vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 16) || (nobjs > 16)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_INT);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<int> ((int *)array_data(array3),(int)array_size(array3,0));
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "proximalFlat" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "proximalFlat" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "proximalFlat" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "proximalFlat" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_bool(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "proximalFlat" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "proximalFlat" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  res10 = SWIG_AsCharPtrAndSize(swig_obj[9], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "proximalFlat" "', argument " "10"" of type '" "char *""'");
  }
  arg10 = reinterpret_cast< char * >(buf10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "proximalFlat" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_bool(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "proximalFlat" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  ecode13 = SWIG_AsVal_bool(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "proximalFlat" "', argument " "13"" of type '" "bool""'");
  } 
  arg13 = static_cast< bool >(val13);
  ecode14 = SWIG_AsVal_bool(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "proximalFlat" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  ecode15 = SWIG_AsVal_int(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "proximalFlat" "', argument " "15"" of type '" "int""'");
  } 
  arg15 = static_cast< int >(val15);
  ecode16 = SWIG_AsVal_bool(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "proximalFlat" "', argument " "16"" of type '" "bool""'");
  } 
  arg16 = static_cast< bool >(val16);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Vector< double > *)_proximalFlat< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp n = result->n();
    npy_intp dims[1] = {
      n
    };
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,n * sizeof(double));
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_proximalFlat__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Vector< int > *arg3 = (Vector< int > *) 0 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool arg9 ;
  char *arg10 = (char *) 0 ;
  bool arg11 ;
  bool arg12 ;
  bool arg13 ;
  bool arg14 ;
  int arg15 ;
  bool arg16 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  int res10 ;
  char *buf10 = 0 ;
  int alloc10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  bool val13 ;
  int ecode13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  int val15 ;
  int ecode15 = 0 ;
  bool val16 ;
  int ecode16 = 0 ;
  Vector< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 16) || (nobjs > 16)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_INT);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<int> ((int *)array_data(array3),(int)array_size(array3,0));
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "proximalFlat" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "proximalFlat" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "proximalFlat" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "proximalFlat" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_bool(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "proximalFlat" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "proximalFlat" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  res10 = SWIG_AsCharPtrAndSize(swig_obj[9], &buf10, NULL, &alloc10);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "proximalFlat" "', argument " "10"" of type '" "char *""'");
  }
  arg10 = reinterpret_cast< char * >(buf10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "proximalFlat" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_bool(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "proximalFlat" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  ecode13 = SWIG_AsVal_bool(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "proximalFlat" "', argument " "13"" of type '" "bool""'");
  } 
  arg13 = static_cast< bool >(val13);
  ecode14 = SWIG_AsVal_bool(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "proximalFlat" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  ecode15 = SWIG_AsVal_int(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "proximalFlat" "', argument " "15"" of type '" "int""'");
  } 
  arg15 = static_cast< int >(val15);
  ecode16 = SWIG_AsVal_bool(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "proximalFlat" "', argument " "16"" of type '" "bool""'");
  } 
  arg16 = static_cast< bool >(val16);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Vector< float > *)_proximalFlat< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp n = result->n();
    npy_intp dims[1] = {
      n
    };
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(1, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,n * sizeof(float));
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  if (alloc10 == SWIG_NEWOBJ) delete[] buf10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_proximalFlat(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[17] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "proximalFlat", 0, 16, argv))) SWIG_fail;
  --argc;
  if (argc == 16) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[4], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[5], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[6], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_proximalFlat__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 16) {
    PyObject *retobj = _wrap_proximalFlat__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'proximalFlat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _proximalFlat< double >(Matrix< double > *,Matrix< double > *,Vector< int > *,int,double,double,double,bool,bool,char *,bool,bool,bool,bool,int,bool)\n"
    "    _proximalFlat< float >(Matrix< float > *,Matrix< float > *,Vector< int > *,int,float,float,float,bool,bool,char *,bool,bool,bool,bool,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_proximalTree__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Vector< double > *arg3 = (Vector< double > *) 0 ;
  SpMatrix< bool > *arg4 = (SpMatrix< bool > *) 0 ;
  Vector< int > *arg5 = (Vector< int > *) 0 ;
  Vector< int > *arg6 = (Vector< int > *) 0 ;
  int arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  bool arg11 ;
  bool arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  int arg18 ;
  bool arg19 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyObject *sparray4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  int val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  int res13 ;
  char *buf13 = 0 ;
  int alloc13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  bool val15 ;
  int ecode15 = 0 ;
  bool val16 ;
  int ecode16 = 0 ;
  bool val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  bool val19 ;
  int ecode19 = 0 ;
  Vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 19) || (nobjs > 19)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<double> ((double *)array_data(array3),(int)array_size(array3,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray4 = swig_obj[3];
    if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
        PyObject_HasAttrString(sparray4, "indices") &&
        PyObject_HasAttrString(sparray4, "data") &&
        PyObject_HasAttrString(sparray4, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 4 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray4, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray4, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray4, "data");
    PyObject* shape = PyObject_GetAttrString(sparray4, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg4 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    array5 = obj_to_array_no_conversion(swig_obj[4], NPY_INT);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = new Vector<int> ((int *)array_data(array5),(int)array_size(array5,0));
  }
  {
    array6 = obj_to_array_no_conversion(swig_obj[5], NPY_INT);
    if (!array6 || !require_dimensions(array6,1) || !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = new Vector<int> ((int *)array_data(array6),(int)array_size(array6,0));
  }
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "proximalTree" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "proximalTree" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "proximalTree" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "proximalTree" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "proximalTree" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_bool(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "proximalTree" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  res13 = SWIG_AsCharPtrAndSize(swig_obj[12], &buf13, NULL, &alloc13);
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "proximalTree" "', argument " "13"" of type '" "char *""'");
  }
  arg13 = reinterpret_cast< char * >(buf13);
  ecode14 = SWIG_AsVal_bool(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "proximalTree" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  ecode15 = SWIG_AsVal_bool(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "proximalTree" "', argument " "15"" of type '" "bool""'");
  } 
  arg15 = static_cast< bool >(val15);
  ecode16 = SWIG_AsVal_bool(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "proximalTree" "', argument " "16"" of type '" "bool""'");
  } 
  arg16 = static_cast< bool >(val16);
  ecode17 = SWIG_AsVal_bool(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "proximalTree" "', argument " "17"" of type '" "bool""'");
  } 
  arg17 = static_cast< bool >(val17);
  ecode18 = SWIG_AsVal_int(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "proximalTree" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  ecode19 = SWIG_AsVal_bool(swig_obj[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "proximalTree" "', argument " "19"" of type '" "bool""'");
  } 
  arg19 = static_cast< bool >(val19);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Vector< double > *)_proximalTree< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp n = result->n();
    npy_intp dims[1] = {
      n
    };
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,n * sizeof(double));
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc13 == SWIG_NEWOBJ) delete[] buf13;
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc13 == SWIG_NEWOBJ) delete[] buf13;
  return NULL;
}


SWIGINTERN PyObject *_wrap_proximalTree__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Vector< float > *arg3 = (Vector< float > *) 0 ;
  SpMatrix< bool > *arg4 = (SpMatrix< bool > *) 0 ;
  Vector< int > *arg5 = (Vector< int > *) 0 ;
  Vector< int > *arg6 = (Vector< int > *) 0 ;
  int arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  bool arg11 ;
  bool arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  bool arg17 ;
  int arg18 ;
  bool arg19 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyObject *sparray4 = NULL ;
  PyArrayObject *array5 = NULL ;
  PyArrayObject *array6 = NULL ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  int res13 ;
  char *buf13 = 0 ;
  int alloc13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  bool val15 ;
  int ecode15 = 0 ;
  bool val16 ;
  int ecode16 = 0 ;
  bool val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  bool val19 ;
  int ecode19 = 0 ;
  Vector< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 19) || (nobjs > 19)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<float> ((float *)array_data(array3),(int)array_size(array3,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray4 = swig_obj[3];
    if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
        PyObject_HasAttrString(sparray4, "indices") &&
        PyObject_HasAttrString(sparray4, "data") &&
        PyObject_HasAttrString(sparray4, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 4 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray4, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray4, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray4, "data");
    PyObject* shape = PyObject_GetAttrString(sparray4, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg4 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    array5 = obj_to_array_no_conversion(swig_obj[4], NPY_INT);
    if (!array5 || !require_dimensions(array5,1) || !require_contiguous(array5) || !require_native(array5)) SWIG_fail;
    arg5 = new Vector<int> ((int *)array_data(array5),(int)array_size(array5,0));
  }
  {
    array6 = obj_to_array_no_conversion(swig_obj[5], NPY_INT);
    if (!array6 || !require_dimensions(array6,1) || !require_contiguous(array6) || !require_native(array6)) SWIG_fail;
    arg6 = new Vector<int> ((int *)array_data(array6),(int)array_size(array6,0));
  }
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "proximalTree" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_float(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "proximalTree" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "proximalTree" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  ecode10 = SWIG_AsVal_float(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "proximalTree" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = static_cast< float >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "proximalTree" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_bool(swig_obj[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "proximalTree" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  res13 = SWIG_AsCharPtrAndSize(swig_obj[12], &buf13, NULL, &alloc13);
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "proximalTree" "', argument " "13"" of type '" "char *""'");
  }
  arg13 = reinterpret_cast< char * >(buf13);
  ecode14 = SWIG_AsVal_bool(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "proximalTree" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  ecode15 = SWIG_AsVal_bool(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "proximalTree" "', argument " "15"" of type '" "bool""'");
  } 
  arg15 = static_cast< bool >(val15);
  ecode16 = SWIG_AsVal_bool(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "proximalTree" "', argument " "16"" of type '" "bool""'");
  } 
  arg16 = static_cast< bool >(val16);
  ecode17 = SWIG_AsVal_bool(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "proximalTree" "', argument " "17"" of type '" "bool""'");
  } 
  arg17 = static_cast< bool >(val17);
  ecode18 = SWIG_AsVal_int(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "proximalTree" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  ecode19 = SWIG_AsVal_bool(swig_obj[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "proximalTree" "', argument " "19"" of type '" "bool""'");
  } 
  arg19 = static_cast< bool >(val19);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Vector< float > *)_proximalTree< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp n = result->n();
    npy_intp dims[1] = {
      n
    };
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(1, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,n * sizeof(float));
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc13 == SWIG_NEWOBJ) delete[] buf13;
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  {
    delete arg6;
  }
  if (alloc13 == SWIG_NEWOBJ) delete[] buf13;
  return NULL;
}


SWIGINTERN PyObject *_wrap_proximalTree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[20] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "proximalTree", 0, 19, argv))) SWIG_fail;
  --argc;
  if (argc == 19) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 1) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[7], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[8], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[9], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_proximalTree__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 19) {
    PyObject *retobj = _wrap_proximalTree__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'proximalTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _proximalTree< double >(Matrix< double > *,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,double,double,double,bool,bool,char *,bool,bool,bool,bool,int,bool)\n"
    "    _proximalTree< float >(Matrix< float > *,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,Vector< int > *,Vector< int > *,int,float,float,float,bool,bool,char *,bool,bool,bool,bool,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  Vector< double > *arg3 = (Vector< double > *) 0 ;
  SpMatrix< bool > *arg4 = (SpMatrix< bool > *) 0 ;
  SpMatrix< bool > *arg5 = (SpMatrix< bool > *) 0 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  bool arg10 ;
  bool arg11 ;
  char *arg12 = (char *) 0 ;
  bool arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  int arg17 ;
  bool arg18 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyObject *sparray4 = NULL ;
  PyObject *sparray5 = NULL ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  int res12 ;
  char *buf12 = 0 ;
  int alloc12 = 0 ;
  bool val13 ;
  int ecode13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  bool val15 ;
  int ecode15 = 0 ;
  bool val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  bool val18 ;
  int ecode18 = 0 ;
  Vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 18) || (nobjs > 18)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<double> ((double *)array_data(array3),(int)array_size(array3,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray4 = swig_obj[3];
    if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
        PyObject_HasAttrString(sparray4, "indices") &&
        PyObject_HasAttrString(sparray4, "data") &&
        PyObject_HasAttrString(sparray4, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 4 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray4, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray4, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray4, "data");
    PyObject* shape = PyObject_GetAttrString(sparray4, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg4 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray5 = swig_obj[4];
    if ( !( PyObject_HasAttrString(sparray5, "indptr") &&
        PyObject_HasAttrString(sparray5, "indices") &&
        PyObject_HasAttrString(sparray5, "data") &&
        PyObject_HasAttrString(sparray5, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 5 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray5, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray5, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray5, "data");
    PyObject* shape = PyObject_GetAttrString(sparray5, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg5: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg5: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg5: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg5 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "proximalGraph" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "proximalGraph" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "proximalGraph" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "proximalGraph" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "proximalGraph" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "proximalGraph" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  res12 = SWIG_AsCharPtrAndSize(swig_obj[11], &buf12, NULL, &alloc12);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "proximalGraph" "', argument " "12"" of type '" "char *""'");
  }
  arg12 = reinterpret_cast< char * >(buf12);
  ecode13 = SWIG_AsVal_bool(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "proximalGraph" "', argument " "13"" of type '" "bool""'");
  } 
  arg13 = static_cast< bool >(val13);
  ecode14 = SWIG_AsVal_bool(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "proximalGraph" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  ecode15 = SWIG_AsVal_bool(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "proximalGraph" "', argument " "15"" of type '" "bool""'");
  } 
  arg15 = static_cast< bool >(val15);
  ecode16 = SWIG_AsVal_bool(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "proximalGraph" "', argument " "16"" of type '" "bool""'");
  } 
  arg16 = static_cast< bool >(val16);
  ecode17 = SWIG_AsVal_int(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "proximalGraph" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  ecode18 = SWIG_AsVal_bool(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "proximalGraph" "', argument " "18"" of type '" "bool""'");
  } 
  arg18 = static_cast< bool >(val18);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Vector< double > *)_proximalGraph< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp n = result->n();
    npy_intp dims[1] = {
      n
    };
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,n * sizeof(double));
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return NULL;
}


SWIGINTERN PyObject *_wrap_proximalGraph__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  Vector< float > *arg3 = (Vector< float > *) 0 ;
  SpMatrix< bool > *arg4 = (SpMatrix< bool > *) 0 ;
  SpMatrix< bool > *arg5 = (SpMatrix< bool > *) 0 ;
  int arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  bool arg10 ;
  bool arg11 ;
  char *arg12 = (char *) 0 ;
  bool arg13 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  int arg17 ;
  bool arg18 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  PyArrayObject *array3 = NULL ;
  PyObject *sparray4 = NULL ;
  PyObject *sparray5 = NULL ;
  int val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  int res12 ;
  char *buf12 = 0 ;
  int alloc12 = 0 ;
  bool val13 ;
  int ecode13 = 0 ;
  bool val14 ;
  int ecode14 = 0 ;
  bool val15 ;
  int ecode15 = 0 ;
  bool val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  bool val18 ;
  int ecode18 = 0 ;
  Vector< float > *result = 0 ;
  
  (void)self;
  if ((nobjs < 18) || (nobjs > 18)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  {
    array3 = obj_to_array_no_conversion(swig_obj[2], NPY_FLOAT);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3) || !require_native(array3)) SWIG_fail;
    arg3 = new Vector<float> ((float *)array_data(array3),(int)array_size(array3,0));
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray4 = swig_obj[3];
    if ( !( PyObject_HasAttrString(sparray4, "indptr") &&
        PyObject_HasAttrString(sparray4, "indices") &&
        PyObject_HasAttrString(sparray4, "data") &&
        PyObject_HasAttrString(sparray4, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 4 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray4, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray4, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray4, "data");
    PyObject* shape = PyObject_GetAttrString(sparray4, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg4: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg4 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  {
    /* a column compressed storage sparse matrix in python scipy
           looks like this
    
           A = csc_matrix( ... )
           A.indptr # pointer array
           A.indices # indices array
           A.data # nonzero values array
           A.shape # size of matrix
    
           >>> type(A.indptr)
           <type 'numpy.ndarray'> #int32
           >>> type(A.indices)
           <type 'numpy.ndarray'> #int32
           >>> type(A.data)
           <type 'numpy.ndarray'>
           >>> type(A.shape)
           <type 'tuple'>
         */
    /*@SWIG:py_typemaps.i,181,map_sparse@*/
    sparray5 = swig_obj[4];
    if ( !( PyObject_HasAttrString(sparray5, "indptr") &&
        PyObject_HasAttrString(sparray5, "indices") &&
        PyObject_HasAttrString(sparray5, "data") &&
        PyObject_HasAttrString(sparray5, "shape"))) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 5 : not a column compressed sparse matrix");
      return NULL;
    }
    
    /* fetch sparse attributes */
    PyArrayObject* indptr = (PyArrayObject *) PyObject_GetAttrString(sparray5, "indptr");
    PyArrayObject* indices = (PyArrayObject *) PyObject_GetAttrString(sparray5, "indices");
    PyArrayObject* data = (PyArrayObject *) PyObject_GetAttrString(sparray5, "data");
    PyObject* shape = PyObject_GetAttrString(sparray5, "shape");
    
    /* check that types are OK */
    if (check_array(indptr,NPY_INT))
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg5: indptr array should be 1d int's");
      return NULL;
    }
    
    if check_array(indices,NPY_INT)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg5: indices array should be 1d int's");
      return NULL;
    }
    
    if check_array(data, NPY_BOOL)
    {
      PyErr_SetString(PyExc_TypeError,"spmatrix arg5: data array should be 1d and match datatype");
      return NULL;
    }
    
    if (!PyTuple_Check(shape))
    {
      PyErr_SetString(PyExc_TypeError,"shape should be a tuple");
      return NULL;
    }
    
    /* get array dimensions */
    int32_t m =PyInt_AsLong(PyTuple_GetItem(shape, 0));
    int32_t n =PyInt_AsLong(PyTuple_GetItem(shape, 1));
    
    
    int *pB = (int *)array_data(indptr);
    int *pE = pB + 1;
    int nzmax = (int)array_size(data,0);
    Py_DECREF(indptr);
    Py_DECREF(indices);
    Py_DECREF(data);
    Py_DECREF(shape);
    
    
    arg5 = new SpMatrix<bool> ((bool *)array_data(data),(int *)array_data(indices),pB,pE,m,n,nzmax);
    /*@SWIG@*/
    
  }
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "proximalGraph" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "proximalGraph" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "proximalGraph" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "proximalGraph" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  ecode10 = SWIG_AsVal_bool(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "proximalGraph" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "proximalGraph" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  res12 = SWIG_AsCharPtrAndSize(swig_obj[11], &buf12, NULL, &alloc12);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "proximalGraph" "', argument " "12"" of type '" "char *""'");
  }
  arg12 = reinterpret_cast< char * >(buf12);
  ecode13 = SWIG_AsVal_bool(swig_obj[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "proximalGraph" "', argument " "13"" of type '" "bool""'");
  } 
  arg13 = static_cast< bool >(val13);
  ecode14 = SWIG_AsVal_bool(swig_obj[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "proximalGraph" "', argument " "14"" of type '" "bool""'");
  } 
  arg14 = static_cast< bool >(val14);
  ecode15 = SWIG_AsVal_bool(swig_obj[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "proximalGraph" "', argument " "15"" of type '" "bool""'");
  } 
  arg15 = static_cast< bool >(val15);
  ecode16 = SWIG_AsVal_bool(swig_obj[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "proximalGraph" "', argument " "16"" of type '" "bool""'");
  } 
  arg16 = static_cast< bool >(val16);
  ecode17 = SWIG_AsVal_int(swig_obj[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "proximalGraph" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  ecode18 = SWIG_AsVal_bool(swig_obj[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "proximalGraph" "', argument " "18"" of type '" "bool""'");
  } 
  arg18 = static_cast< bool >(val18);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Vector< float > *)_proximalGraph< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp n = result->n();
    npy_intp dims[1] = {
      n
    };
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(1, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,n * sizeof(float));
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  {
    delete arg4;
  }
  {
    delete arg5;
  }
  if (alloc12 == SWIG_NEWOBJ) delete[] buf12;
  return NULL;
}


SWIGINTERN PyObject *_wrap_proximalGraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[19] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "proximalGraph", 0, 18, argv))) SWIG_fail;
  --argc;
  if (argc == 18) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[2]) && (array_numdims(argv[2]) == 1) && PyArray_EquivTypenums(array_type(argv[2]),NPY_FLOAT);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[6], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[7], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_float(argv[8], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_proximalGraph__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 18) {
    PyObject *retobj = _wrap_proximalGraph__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'proximalGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _proximalGraph< double >(Matrix< double > *,Matrix< double > *,Vector< double > *,SpMatrix< bool > *,SpMatrix< bool > *,int,double,double,double,bool,bool,char *,bool,bool,bool,bool,int,bool)\n"
    "    _proximalGraph< float >(Matrix< float > *,Matrix< float > *,Vector< float > *,SpMatrix< bool > *,SpMatrix< bool > *,int,float,float,float,bool,bool,char *,bool,bool,bool,bool,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_simpleGroupTree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  PyArrayObject *array1 = NULL ;
  int i1 = 1 ;
  PyObject *swig_obj[1] ;
  std::vector< StructNodeElem< double > * > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_INT);
    if (!array1 || !require_dimensions(array1,1) || !require_contiguous(array1)
      || !require_native(array1)) SWIG_fail;
    arg1 = (int*) array_data(array1);
    arg2 = 1;
    for (i1=0; i1 < array_numdims(array1); ++i1) arg2 *= array_size(array1,i1);
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< StructNodeElem< double > * > *)_simpleGroupTree< double >(arg1,arg2);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    //int n = result->size();
    PyObject* node_list = PyList_New(0);
    for(std::vector<StructNodeElem<double> *>::iterator it = result->begin();it != result->end();it++) {
      PyObject* tuple = PyTuple_New(4);
      StructNodeElem<double> *node = *it;
      int inode = node->node_num;
      PyTuple_SetItem(tuple,0, PyInt_FromLong((long)inode));
      PyTuple_SetItem(tuple,1, PyFloat_FromDouble(node->weight));
      int k = node->vars->size();
      PyObject *vars = PyList_New(0);
      std::vector<int> *pvars = node->vars;
      for(int i = 0;i < k;i++)
      PyList_Append(vars,PyInt_FromLong((long)(*pvars)[i]));
      PyTuple_SetItem(tuple,2, (PyObject* )vars);
      k = node->children->size();
      pvars = node->children;
      PyObject *children = PyList_New(0);
      for(int i = 0;i < k;i++)
      PyList_Append(children,PyInt_FromLong((long)(*pvars)[i]));
      
      PyTuple_SetItem(tuple,3,(PyObject* )children );
      PyList_Append(node_list,tuple);
    }
    del_gstruct(result);
    resultobj = SWIG_Python_AppendOutput(resultobj,node_list);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_readGroupStruct(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< StructNodeElem< double > * > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "readGroupStruct" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< StructNodeElem< double > * > *)_readGroupStruct< double >((char const *)arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    //int n = result->size();
    PyObject* node_list = PyList_New(0);
    for(std::vector<StructNodeElem<double> *>::iterator it = result->begin();it != result->end();it++) {
      PyObject* tuple = PyTuple_New(4);
      StructNodeElem<double> *node = *it;
      int inode = node->node_num;
      PyTuple_SetItem(tuple,0, PyInt_FromLong((long)inode));
      PyTuple_SetItem(tuple,1, PyFloat_FromDouble(node->weight));
      int k = node->vars->size();
      PyObject *vars = PyList_New(0);
      std::vector<int> *pvars = node->vars;
      for(int i = 0;i < k;i++)
      PyList_Append(vars,PyInt_FromLong((long)(*pvars)[i]));
      PyTuple_SetItem(tuple,2, (PyObject* )vars);
      k = node->children->size();
      pvars = node->children;
      PyObject *children = PyList_New(0);
      for(int i = 0;i < k;i++)
      PyList_Append(children,PyInt_FromLong((long)(*pvars)[i]));
      
      PyTuple_SetItem(tuple,3,(PyObject* )children );
      PyList_Append(node_list,tuple);
    }
    del_gstruct(result);
    resultobj = SWIG_Python_AppendOutput(resultobj,node_list);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_groupStructOfString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< StructNodeElem< double > * > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "groupStructOfString" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (std::vector< StructNodeElem< double > * > *)_groupStructOfString< double >((char const *)arg1);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    //int n = result->size();
    PyObject* node_list = PyList_New(0);
    for(std::vector<StructNodeElem<double> *>::iterator it = result->begin();it != result->end();it++) {
      PyObject* tuple = PyTuple_New(4);
      StructNodeElem<double> *node = *it;
      int inode = node->node_num;
      PyTuple_SetItem(tuple,0, PyInt_FromLong((long)inode));
      PyTuple_SetItem(tuple,1, PyFloat_FromDouble(node->weight));
      int k = node->vars->size();
      PyObject *vars = PyList_New(0);
      std::vector<int> *pvars = node->vars;
      for(int i = 0;i < k;i++)
      PyList_Append(vars,PyInt_FromLong((long)(*pvars)[i]));
      PyTuple_SetItem(tuple,2, (PyObject* )vars);
      k = node->children->size();
      pvars = node->children;
      PyObject *children = PyList_New(0);
      for(int i = 0;i < k;i++)
      PyList_Append(children,PyInt_FromLong((long)(*pvars)[i]));
      
      PyTuple_SetItem(tuple,3,(PyObject* )children );
      PyList_Append(node_list,tuple);
    }
    del_gstruct(result);
    resultobj = SWIG_Python_AppendOutput(resultobj,node_list);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_graphOfGroupStruct__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< StructNodeElem< double > * > *arg1 = (std::vector< StructNodeElem< double > * > *) 0 ;
  SpMatrix< bool > **arg2 = (SpMatrix< bool > **) 0 ;
  SpMatrix< bool > **arg3 = (SpMatrix< bool > **) 0 ;
  SpMatrix< bool > *data_temp2 ;
  SpMatrix< bool > *data_temp3 ;
  Vector< double > *result = 0 ;
  
  {
    arg2 = &data_temp2;
  }
  {
    arg3 = &data_temp3;
  }
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    PyObject* pytree = swig_obj[0];
    if(!PyList_Check(pytree)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 must be a list");SWIG_fail;
    }
    arg1 = new std::vector<StructNodeElem<double> *>;
    for(Py_ssize_t i = 0;i < PyList_Size(pytree);i++) {
      PyObject* pynode = PyList_GetItem(pytree,i);
      if(! PyTuple_Check(pynode) || (PyTuple_Size(pynode) != 4)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"List elements of arg 1 must be tuples of size 4");SWIG_fail;
      }
      long inode = PyInt_AsLong(PyTuple_GetItem(pynode,(Py_ssize_t)0));
      double w = PyFloat_AsDouble(PyTuple_GetItem(pynode,(Py_ssize_t)1));
      std::vector<int> *vars = new std::vector<int>;
      std::vector<int> *children = new std::vector<int>;
      PyObject* pyvars = PyTuple_GetItem(pynode,(Py_ssize_t)2);
      PyObject* pychildren = PyTuple_GetItem(pynode,(Py_ssize_t)3);
      for(Py_ssize_t j = 0;j < PyList_Size(pyvars);j++)
      vars->push_back(static_cast<int>(PyInt_AsLong(PyList_GetItem(pyvars,j))));
      for(Py_ssize_t j = 0;j < PyList_Size(pychildren);j++)
      children->push_back(static_cast<int>(PyInt_AsLong(PyList_GetItem(pychildren,j))));
      StructNodeElem<double> *node = new StructNodeElem<double>(inode,w,vars,children);
      arg1->push_back(node);
    }
    
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Vector< double > *)_graphOfGroupStruct< double >(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp n = result->n();
    npy_intp dims[1] = {
      n
    };
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    double *data = (double *)array->data;
    double *idata = result->rawX();
    memcpy(data,idata,n * sizeof(double));
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    if(data_temp2 != NULL) {
      npy_intp m = data_temp2->m();
      npy_intp n = data_temp2->n();
      npy_intp nzmax = data_temp2->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_BOOL);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      bool *xdata = data_temp2->v();
      bool *data = (bool *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(bool));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp2->r();
      int *pB = data_temp2->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp nzmax = data_temp3->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_BOOL);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      bool *xdata = data_temp3->v();
      bool *data = (bool *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(bool));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp3->r();
      int *pB = data_temp3->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    del_gstruct(arg1);
  }
  return resultobj;
fail:
  {
    del_gstruct(arg1);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_graphOfGroupStruct__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< StructNodeElem< float > * > *arg1 = (std::vector< StructNodeElem< float > * > *) 0 ;
  SpMatrix< bool > **arg2 = (SpMatrix< bool > **) 0 ;
  SpMatrix< bool > **arg3 = (SpMatrix< bool > **) 0 ;
  SpMatrix< bool > *data_temp2 ;
  SpMatrix< bool > *data_temp3 ;
  Vector< float > *result = 0 ;
  
  {
    arg2 = &data_temp2;
  }
  {
    arg3 = &data_temp3;
  }
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    PyObject* pytree = swig_obj[0];
    if(!PyList_Check(pytree)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 must be a list");SWIG_fail;
    }
    arg1 = new std::vector<StructNodeElem<float> *>;
    for(Py_ssize_t i = 0;i < PyList_Size(pytree);i++) {
      PyObject* pynode = PyList_GetItem(pytree,i);
      if(! PyTuple_Check(pynode) || (PyTuple_Size(pynode) != 4)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"List elements of arg 1 must be tuples of size 4");SWIG_fail;
      }
      long inode = PyInt_AsLong(PyTuple_GetItem(pynode,(Py_ssize_t)0));
      float w = PyFloat_AsDouble(PyTuple_GetItem(pynode,(Py_ssize_t)1));
      std::vector<int> *vars = new std::vector<int>;
      std::vector<int> *children = new std::vector<int>;
      PyObject* pyvars = PyTuple_GetItem(pynode,(Py_ssize_t)2);
      PyObject* pychildren = PyTuple_GetItem(pynode,(Py_ssize_t)3);
      for(Py_ssize_t j = 0;j < PyList_Size(pyvars);j++)
      vars->push_back(static_cast<int>(PyInt_AsLong(PyList_GetItem(pyvars,j))));
      for(Py_ssize_t j = 0;j < PyList_Size(pychildren);j++)
      children->push_back(static_cast<int>(PyInt_AsLong(PyList_GetItem(pychildren,j))));
      StructNodeElem<float> *node = new StructNodeElem<float>(inode,w,vars,children);
      arg1->push_back(node);
    }
    
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (Vector< float > *)_graphOfGroupStruct< float >(arg1,arg2,arg3);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  {
    npy_intp n = result->n();
    npy_intp dims[1] = {
      n
    };
    PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNew(1, dims, NPY_FLOAT);
    float *data = (float *)array->data;
    float *idata = result->rawX();
    memcpy(data,idata,n * sizeof(float));
    delete result;
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    
  }
  {
    if(data_temp2 != NULL) {
      npy_intp m = data_temp2->m();
      npy_intp n = data_temp2->n();
      npy_intp nzmax = data_temp2->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_BOOL);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      bool *xdata = data_temp2->v();
      bool *data = (bool *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(bool));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp2->r();
      int *pB = data_temp2->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    if(data_temp3 != NULL) {
      npy_intp m = data_temp3->m();
      npy_intp n = data_temp3->n();
      npy_intp nzmax = data_temp3->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_BOOL);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      bool *xdata = data_temp3->v();
      bool *data = (bool *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(bool));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp3->r();
      int *pB = data_temp3->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    del_gstruct(arg1);
  }
  return resultobj;
fail:
  {
    del_gstruct(arg1);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_graphOfGroupStruct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "graphOfGroupStruct", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_graphOfGroupStruct__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    PyObject *retobj = _wrap_graphOfGroupStruct__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'graphOfGroupStruct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _graphOfGroupStruct< double >(std::vector< StructNodeElem< double > * > *,SpMatrix< bool > **,SpMatrix< bool > **)\n"
    "    _graphOfGroupStruct< float >(std::vector< StructNodeElem< float > * > *,SpMatrix< bool > **,SpMatrix< bool > **)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_treeOfGroupStruct__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< StructNodeElem< double > * > *arg1 = (std::vector< StructNodeElem< double > * > *) 0 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  Vector< double > **arg4 = (Vector< double > **) 0 ;
  SpMatrix< bool > **arg5 = (SpMatrix< bool > **) 0 ;
  Vector< int > **arg6 = (Vector< int > **) 0 ;
  Vector< int > **arg7 = (Vector< int > **) 0 ;
  int *data_temp2 = NULL ;
  int dim_temp2 ;
  Vector< double > *data_temp4 ;
  SpMatrix< bool > *data_temp5 ;
  Vector< int > *data_temp6 ;
  Vector< int > *data_temp7 ;
  int result;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  {
    arg4 = &data_temp4;
  }
  {
    arg5 = &data_temp5;
  }
  {
    arg6 = &data_temp6;
  }
  {
    arg7 = &data_temp7;
  }
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    PyObject* pytree = swig_obj[0];
    if(!PyList_Check(pytree)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 must be a list");SWIG_fail;
    }
    arg1 = new std::vector<StructNodeElem<double> *>;
    for(Py_ssize_t i = 0;i < PyList_Size(pytree);i++) {
      PyObject* pynode = PyList_GetItem(pytree,i);
      if(! PyTuple_Check(pynode) || (PyTuple_Size(pynode) != 4)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"List elements of arg 1 must be tuples of size 4");SWIG_fail;
      }
      long inode = PyInt_AsLong(PyTuple_GetItem(pynode,(Py_ssize_t)0));
      double w = PyFloat_AsDouble(PyTuple_GetItem(pynode,(Py_ssize_t)1));
      std::vector<int> *vars = new std::vector<int>;
      std::vector<int> *children = new std::vector<int>;
      PyObject* pyvars = PyTuple_GetItem(pynode,(Py_ssize_t)2);
      PyObject* pychildren = PyTuple_GetItem(pynode,(Py_ssize_t)3);
      for(Py_ssize_t j = 0;j < PyList_Size(pyvars);j++)
      vars->push_back(static_cast<int>(PyInt_AsLong(PyList_GetItem(pyvars,j))));
      for(Py_ssize_t j = 0;j < PyList_Size(pychildren);j++)
      children->push_back(static_cast<int>(PyInt_AsLong(PyList_GetItem(pychildren,j))));
      StructNodeElem<double> *node = new StructNodeElem<double>(inode,w,vars,children);
      arg1->push_back(node);
    }
    
  }
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (int)_treeOfGroupStruct< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
  }
  {
    if(data_temp4 != NULL) {
      npy_intp n = data_temp4->n();
      npy_intp dims[1] = {
        n
      };
      double *data = data_temp4->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE,(void*)data);
      if (!array) SWIG_fail;
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    if(data_temp5 != NULL) {
      npy_intp m = data_temp5->m();
      npy_intp n = data_temp5->n();
      npy_intp nzmax = data_temp5->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_BOOL);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      bool *xdata = data_temp5->v();
      bool *data = (bool *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(bool));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp5->r();
      int *pB = data_temp5->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    if(data_temp6 != NULL) {
      npy_intp n = data_temp6->n();
      npy_intp dims[1] = {
        n
      };
      int *data = data_temp6->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(1, dims, NPY_INT,(void*)data);
      if (!array) SWIG_fail;
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    if(data_temp7 != NULL) {
      npy_intp n = data_temp7->n();
      npy_intp dims[1] = {
        n
      };
      int *data = data_temp7->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(1, dims, NPY_INT,(void*)data);
      if (!array) SWIG_fail;
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    del_gstruct(arg1);
  }
  return resultobj;
fail:
  {
    del_gstruct(arg1);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_treeOfGroupStruct__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< StructNodeElem< float > * > *arg1 = (std::vector< StructNodeElem< float > * > *) 0 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  Vector< float > **arg4 = (Vector< float > **) 0 ;
  SpMatrix< bool > **arg5 = (SpMatrix< bool > **) 0 ;
  Vector< int > **arg6 = (Vector< int > **) 0 ;
  Vector< int > **arg7 = (Vector< int > **) 0 ;
  int *data_temp2 = NULL ;
  int dim_temp2 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  SpMatrix< bool > *data_temp5 ;
  Vector< int > *data_temp6 ;
  Vector< int > *data_temp7 ;
  int result;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  {
    arg5 = &data_temp5;
  }
  {
    arg6 = &data_temp6;
  }
  {
    arg7 = &data_temp7;
  }
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    PyObject* pytree = swig_obj[0];
    if(!PyList_Check(pytree)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"arg 1 must be a list");SWIG_fail;
    }
    arg1 = new std::vector<StructNodeElem<float> *>;
    for(Py_ssize_t i = 0;i < PyList_Size(pytree);i++) {
      PyObject* pynode = PyList_GetItem(pytree,i);
      if(! PyTuple_Check(pynode) || (PyTuple_Size(pynode) != 4)) {
        SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"List elements of arg 1 must be tuples of size 4");SWIG_fail;
      }
      long inode = PyInt_AsLong(PyTuple_GetItem(pynode,(Py_ssize_t)0));
      float w = PyFloat_AsDouble(PyTuple_GetItem(pynode,(Py_ssize_t)1));
      std::vector<int> *vars = new std::vector<int>;
      std::vector<int> *children = new std::vector<int>;
      PyObject* pyvars = PyTuple_GetItem(pynode,(Py_ssize_t)2);
      PyObject* pychildren = PyTuple_GetItem(pynode,(Py_ssize_t)3);
      for(Py_ssize_t j = 0;j < PyList_Size(pyvars);j++)
      vars->push_back(static_cast<int>(PyInt_AsLong(PyList_GetItem(pyvars,j))));
      for(Py_ssize_t j = 0;j < PyList_Size(pychildren);j++)
      children->push_back(static_cast<int>(PyInt_AsLong(PyList_GetItem(pychildren,j))));
      StructNodeElem<float> *node = new StructNodeElem<float>(inode,w,vars,children);
      arg1->push_back(node);
    }
    
  }
  res4 = SWIG_ConvertPtr(swig_obj[1], &argp4,SWIGTYPE_p_p_VectorT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "treeOfGroupStruct" "', argument " "4"" of type '" "Vector< float > **""'"); 
  }
  arg4 = reinterpret_cast< Vector< float > ** >(argp4);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      result = (int)_treeOfGroupStruct< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj,obj);
  }
  {
    if(data_temp5 != NULL) {
      npy_intp m = data_temp5->m();
      npy_intp n = data_temp5->n();
      npy_intp nzmax = data_temp5->nzmax();
      npy_intp dims[2] = {
        m,n
      };
      dims[0] = n + 1;
      PyArrayObject *indptr = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      dims[0] = nzmax;
      PyArrayObject *indices = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_INT);
      PyArrayObject *vdata = (PyArrayObject * )PyArray_SimpleNew(1,dims, NPY_BOOL);
      if (! indptr || !indices || !vdata) SWIG_fail;
      int i;
      bool *xdata = data_temp5->v();
      bool *data = (bool *)array_data(vdata);
      memcpy(data,xdata,nzmax * sizeof(bool));
      npy_int *pi = (npy_int *)array_data(indices);
      int *r = data_temp5->r();
      int *pB = data_temp5->pB();
      if(sizeof(npy_int) == sizeof(int)) {
        memcpy(pi,r,nzmax * sizeof(int));
        pi = (npy_int *)array_data(indptr);
        memcpy(pi,pB,(n + 1) * sizeof(int));
      } else {
        for(i = 0;i< nzmax;i++)
        *(pi+i) = (npy_int) *(r+i);
        pi = (npy_int *)array_data(indptr);
        for(i = 0;i< n + 1;i++)
        *(pi+i) = (npy_int) *(pB+i);
      }
      PyObject* tuple = PyTuple_New(4);
      PyObject* shape = PyTuple_New(2);
      PyTuple_SetItem(shape, 0,  PyInt_FromLong((long)m));
      PyTuple_SetItem(shape, 1,  PyInt_FromLong((long)n));
      PyTuple_SetItem(tuple,0, (PyObject* )indptr);
      PyTuple_SetItem(tuple,1,(PyObject* )indices);
      PyTuple_SetItem(tuple,2,(PyObject* )vdata);
      PyTuple_SetItem(tuple,3,shape);
      resultobj = SWIG_Python_AppendOutput(resultobj,tuple);
    }
  }
  {
    if(data_temp6 != NULL) {
      npy_intp n = data_temp6->n();
      npy_intp dims[1] = {
        n
      };
      int *data = data_temp6->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(1, dims, NPY_INT,(void*)data);
      if (!array) SWIG_fail;
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    if(data_temp7 != NULL) {
      npy_intp n = data_temp7->n();
      npy_intp dims[1] = {
        n
      };
      int *data = data_temp7->rawX();
      PyArrayObject * array = (PyArrayObject * )PyArray_SimpleNewFromData(1, dims, NPY_INT,(void*)data);
      if (!array) SWIG_fail;
      resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array);
    }
  }
  {
    del_gstruct(arg1);
  }
  return resultobj;
fail:
  {
    del_gstruct(arg1);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_treeOfGroupStruct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "treeOfGroupStruct", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_treeOfGroupStruct__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_treeOfGroupStruct__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'treeOfGroupStruct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _treeOfGroupStruct< double >(std::vector< StructNodeElem< double > * > *,int **,int *,Vector< double > **,SpMatrix< bool > **,Vector< int > **,Vector< int > **)\n"
    "    _treeOfGroupStruct< float >(std::vector< StructNodeElem< float > * > *,int **,int *,Vector< float > **,SpMatrix< bool > **,Vector< int > **,Vector< int > **)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_im2col_sliding__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< double > *arg1 = (Matrix< double > *) 0 ;
  Matrix< double > *arg2 = (Matrix< double > *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<double> ((double *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d double Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<double> ((double *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "im2col_sliding" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "im2col_sliding" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "im2col_sliding" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _im2col_sliding< double >(arg1,arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_im2col_sliding__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Matrix< float > *arg1 = (Matrix< float > *) 0 ;
  Matrix< float > *arg2 = (Matrix< float > *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  PyArrayObject *array1 = NULL ;
  PyArrayObject *array2 = NULL ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array1 = obj_to_array_no_conversion(swig_obj[0], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array1 to a numpy
    	fortran array1 by just modifying the strides */
    if (!array1 || !require_dimensions(array1,2) || !array_is_fortran(array1) || !require_native(array1)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 1 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg1 = new Matrix<float> ((float *)array_data(array1),(int)array_size(array1,0),(int)array_size(array1,1));
    
    /*@SWIG@*/
  }
  {
    /*@SWIG:py_typemaps.i,85,map_matrix@*/
    array2 = obj_to_array_no_conversion(swig_obj[1], NPY_FLOAT);
    /* !!!!!
    	WARNING! bug (?) : the variable name choosen above must not appear
    	in the string, otherwise swig will not correctly generate
    	final variable names (above name + number)
    	*/
    /* we cannot use require_fortran, because it convert a numpy C array2 to a numpy
    	fortran array2 by just modifying the strides */
    if (!array2 || !require_dimensions(array2,2) || !array_is_fortran(array2) || !require_native(array2)) {
      SWIG_Python_SetErrorMsg(PyExc_RuntimeError,"matrix arg 2 must be a 2d float Fortran Array"); SWIG_fail;
    }
    arg2 = new Matrix<float> ((float *)array_data(array2),(int)array_size(array2,0),(int)array_size(array2,1));
    
    /*@SWIG@*/
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "im2col_sliding" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "im2col_sliding" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "im2col_sliding" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  try {
    {
      SWIG_PYTHON_THREAD_BEGIN_ALLOW;
      _im2col_sliding< float >(arg1,arg2,arg3,arg4,arg5);
      SWIG_PYTHON_THREAD_END_ALLOW;
    }
  } catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_im2col_sliding(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  (void)self;
  if (!(argc = SWIG_Python_UnpackTuple(args, "im2col_sliding", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v = 0;
    {
      {
        _v = is_array(argv[0]) && (array_numdims(argv[0]) == 2) && PyArray_EquivTypenums(array_type(argv[0]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    {
      {
        _v = is_array(argv[1]) && (array_numdims(argv[1]) == 2) && PyArray_EquivTypenums(array_type(argv[1]),NPY_DOUBLE);
        
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_im2col_sliding__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 5) {
    PyObject *retobj = _wrap_im2col_sliding__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'im2col_sliding'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _im2col_sliding< double >(Matrix< double > *,Matrix< double > *,int,int,bool)\n"
    "    _im2col_sliding< float >(Matrix< float > *,Matrix< float > *,int,int,bool)\n");
  return 0;
}


static PyMethodDef SwigMethods[] = {
	 { "m_ones", _wrap_m_ones, METH_O, NULL},
	 { "skip_space", _wrap_skip_space, METH_O, NULL},
	 { "parse_line", _wrap_parse_line, METH_VARARGS, NULL},
	 { "intlist", _wrap_intlist, METH_O, NULL},
	 { "sort", _wrap_sort, METH_VARARGS, "\n"
		"sort(Vector< double > * v, bool mode)\n"
		"sort(Vector< float > * v, bool mode)\n"
		""},
	 { "mult", _wrap_mult, METH_VARARGS, "\n"
		"mult(Matrix< double > * X, Matrix< double > * Y, Matrix< double > * XY, bool const transX, bool const transY, double const a, double const b)\n"
		"mult(Matrix< float > * X, Matrix< float > * Y, Matrix< float > * XY, bool const transX, bool const transY, float const a, float const b)\n"
		""},
	 { "AAt", _wrap_AAt, METH_VARARGS, "\n"
		"AAt(SpMatrix< double > * A, Matrix< double > * B)\n"
		"AAt(SpMatrix< float > * A, Matrix< float > * B)\n"
		""},
	 { "XAt", _wrap_XAt, METH_VARARGS, "\n"
		"XAt(SpMatrix< double > * A, Matrix< double > * X, Matrix< double > * XAt)\n"
		"XAt(SpMatrix< float > * A, Matrix< float > * X, Matrix< float > * XAt)\n"
		""},
	 { "applyBayerPattern", _wrap_applyBayerPattern, METH_VARARGS, "\n"
		"applyBayerPattern(Vector< double > * v, int offset)\n"
		"applyBayerPattern(Vector< float > * v, int offset)\n"
		""},
	 { "conjugateGradient", _wrap_conjugateGradient, METH_VARARGS, "\n"
		"conjugateGradient(Matrix< double > * A, Vector< double > * b, Vector< double > * x, double const tol, int const itermax)\n"
		"conjugateGradient(Matrix< float > * A, Vector< float > * b, Vector< float > * x, float const tol, int const itermax)\n"
		""},
	 { "invSym", _wrap_invSym, METH_VARARGS, "\n"
		"invSym(Matrix< double > * A)\n"
		"invSym(Matrix< float > * A)\n"
		""},
	 { "normalize", _wrap_normalize, METH_VARARGS, "\n"
		"normalize(Matrix< double > * A)\n"
		"normalize(Matrix< float > * A)\n"
		""},
	 { "sparseProject", _wrap_sparseProject, METH_VARARGS, "\n"
		"sparseProject(Matrix< double > * U, Matrix< double > * V, double const thrs, int const mode, double const lambda1, double const lambda2, double const lambda3, bool const pos, int const numThreads)\n"
		"sparseProject(Matrix< float > * U, Matrix< float > * V, float const thrs, int const mode, float const lambda1, float const lambda2, float const lambda3, bool const pos, int const numThreads)\n"
		""},
	 { "lassoD", _wrap_lassoD, METH_VARARGS, "\n"
		"lassoD(Matrix< double > * X, Matrix< double > * D, bool return_reg_path, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< double >\n"
		"lassoD(Matrix< float > * X, Matrix< float > * D, bool return_reg_path, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< float > *\n"
		""},
	 { "lassoQq", _wrap_lassoQq, METH_VARARGS, "\n"
		"lassoQq(Matrix< double > * X, Matrix< double > * Q, Matrix< double > * q, bool return_reg_path, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< double >\n"
		"lassoQq(Matrix< float > * X, Matrix< float > * Q, Matrix< float > * q, bool return_reg_path, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, bool const ols, int const numThreads, int max_length_path, bool const verbose, bool cholevsky) -> SpMatrix< float > *\n"
		""},
	 { "lassoMask", _wrap_lassoMask, METH_VARARGS, "\n"
		"lassoMask(Matrix< double > * X, Matrix< double > * D, Matrix< bool > * B, int L, double const constraint, double const lambda2, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< double >\n"
		"lassoMask(Matrix< float > * X, Matrix< float > * D, Matrix< bool > * B, int L, float const constraint, float const lambda2, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< float > *\n"
		""},
	 { "lassoWeighted", _wrap_lassoWeighted, METH_VARARGS, "\n"
		"lassoWeighted(Matrix< double > * X, Matrix< double > * D, Matrix< double > * W, int L, double const constraint, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< double >\n"
		"lassoWeighted(Matrix< float > * X, Matrix< float > * D, Matrix< float > * W, int L, float const constraint, constraint_type mode, bool const pos, int const numThreads, bool verbose) -> SpMatrix< float > *\n"
		""},
	 { "omp", _wrap_omp, METH_VARARGS, "\n"
		"omp(Matrix< double > * X, Matrix< double > * D, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< double > * eps, bool given_Lambda, Vector< double > * Lambda, int const numThreads) -> SpMatrix< double >\n"
		"omp(Matrix< float > * X, Matrix< float > * D, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< float > * eps, bool given_Lambda, Vector< float > * Lambda, int const numThreads) -> SpMatrix< float > *\n"
		""},
	 { "ompMask", _wrap_ompMask, METH_VARARGS, "\n"
		"ompMask(Matrix< double > * X, Matrix< double > * D, Matrix< bool > * B, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< double > * eps, bool given_Lambda, Vector< double > * Lambda, int const numThreads) -> SpMatrix< double >\n"
		"ompMask(Matrix< float > * X, Matrix< float > * D, Matrix< bool > * B, bool return_reg_path, bool given_L, Vector< int > * L, bool given_eps, Vector< float > * eps, bool given_Lambda, Vector< float > * Lambda, int const numThreads) -> SpMatrix< float > *\n"
		""},
	 { "somp", _wrap_somp, METH_VARARGS, "\n"
		"somp(Matrix< double > * X, Matrix< double > * D, Vector< int > * groups, int LL, double eps, int numThreads) -> SpMatrix< double >\n"
		"somp(Matrix< float > * X, Matrix< float > * D, Vector< int > * groups, int LL, float eps, int numThreads) -> SpMatrix< float > *\n"
		""},
	 { "cd", _wrap_cd, METH_VARARGS, "\n"
		"cd(Matrix< double > * X, Matrix< double > * D, SpMatrix< double > * alpha, double lambda1, constraint_type mode, int itermax, double tol, int numThreads) -> SpMatrix< double >\n"
		"cd(Matrix< float > * X, Matrix< float > * D, SpMatrix< float > * alpha, float lambda1, constraint_type mode, int itermax, float tol, int numThreads) -> SpMatrix< float > *\n"
		""},
	 { "l1L2BCD", _wrap_l1L2BCD, METH_VARARGS, "\n"
		"l1L2BCD(Matrix< double > * X, Matrix< double > * D, Matrix< double > * alpha0, Vector< int > * groups, double lambda1, constraint_type mode, int itermax, double tol, int numThreads)\n"
		"l1L2BCD(Matrix< float > * X, Matrix< float > * D, Matrix< float > * alpha0, Vector< int > * groups, float lambda1, constraint_type mode, int itermax, float tol, int numThreads)\n"
		""},
	 { "alltrainDL", _wrap_alltrainDL, METH_VARARGS, "\n"
		"alltrainDL(Data< double > * X, bool in_memory, bool return_model, Matrix< double > * m_A, Matrix< double > * m_B, int m_iter, Matrix< double > * D1, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, double tol, bool fixed_step, bool ista, int batch_size, int K, double lambda1, double lambda2, double lambda3, int iter, double t0, constraint_type mode, char * name_regul, bool posAlpha, bool posD, bool expand, constraint_type_D modeD, bool whiten, bool clean, bool verbose, double gamma1, double gamma2, double rho, int iter_updateD, bool stochastic, int modeParam, bool batch, bool log, char * logName) -> Matrix< double >\n"
		"alltrainDL(Data< float > * X, bool in_memory, bool return_model, Matrix< float > * m_A, Matrix< float > * m_B, int m_iter, Matrix< float > * D1, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, float tol, bool fixed_step, bool ista, int batch_size, int K, double lambda1, double lambda2, double lambda3, int iter, double t0, constraint_type mode, char * name_regul, bool posAlpha, bool posD, bool expand, constraint_type_D modeD, bool whiten, bool clean, bool verbose, double gamma1, double gamma2, float rho, int iter_updateD, bool stochastic, int modeParam, bool batch, bool log, char * logName) -> Matrix< float > *\n"
		""},
	 { "archetypalAnalysis", _wrap_archetypalAnalysis, METH_VARARGS, "\n"
		"archetypalAnalysis(Matrix< double > * X, int p, bool robust, double epsilon, bool computeXtX, int stepsFISTA, int stepsAS, bool randominit, int numThreads) -> Matrix< double >\n"
		"archetypalAnalysis(Matrix< float > * X, int p, bool robust, float epsilon, bool computeXtX, int stepsFISTA, int stepsAS, bool randominit, int numThreads) -> Matrix< float > *\n"
		""},
	 { "archetypalAnalysisInit", _wrap_archetypalAnalysisInit, METH_VARARGS, "\n"
		"archetypalAnalysisInit(Matrix< double > * X, Matrix< double > * Z0, bool robust, double epsilon, bool computeXtX, int stepsFISTA, int stepsAS, int numThreads) -> Matrix< double >\n"
		"archetypalAnalysisInit(Matrix< float > * X, Matrix< float > * Z0, bool robust, float epsilon, bool computeXtX, int stepsFISTA, int stepsAS, int numThreads) -> Matrix< float > *\n"
		""},
	 { "decompSimplex", _wrap_decompSimplex, METH_VARARGS, "\n"
		"decompSimplex(Matrix< double > * X, Matrix< double > * Z, bool computeXtX, int numThreads) -> SpMatrix< double >\n"
		"decompSimplex(Matrix< float > * X, Matrix< float > * Z, bool computeXtX, int numThreads) -> SpMatrix< float > *\n"
		""},
	 { "fistaFlat", _wrap_fistaFlat, METH_VARARGS, "\n"
		"fistaFlat(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< int > * groups, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >\n"
		"fistaFlat(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< int > * groups, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *\n"
		""},
	 { "fistaTree", _wrap_fistaTree, METH_VARARGS, "\n"
		"fistaTree(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >\n"
		"fistaTree(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *\n"
		""},
	 { "fistaGraph", _wrap_fistaGraph, METH_VARARGS, "\n"
		"fistaGraph(Matrix< double > * X, AbstractMatrixB< double > * D, Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, int max_it, double L0, bool fixed_step, double gamma, double _lambda, double delta, double lambda2, double lambda3, double a, double b, double c, double tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< double > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< double >\n"
		"fistaGraph(Matrix< float > * X, AbstractMatrixB< float > * D, Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, int max_it, float L0, bool fixed_step, float gamma, float _lambda, float delta, float lambda2, float lambda3, float a, float b, float c, float tol, int it0, int max_iter_backtracking, bool compute_gram, bool lin_admm, bool admm, bool intercept, bool resetflow, char * name_regul, char * name_loss, bool verbose, bool pos, bool clever, bool log, bool ista, bool subgrad, char * logName, bool is_inner_weights, Vector< float > * inner_weights, int size_group, bool sqrt_step, bool transpose, int linesearch_mode) -> Matrix< float > *\n"
		""},
	 { "proximalFlat", _wrap_proximalFlat, METH_VARARGS, "\n"
		"proximalFlat(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< int > * groups, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >\n"
		"proximalFlat(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< int > * groups, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *\n"
		""},
	 { "proximalTree", _wrap_proximalTree, METH_VARARGS, "\n"
		"proximalTree(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >\n"
		"proximalTree(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, Vector< int > * own_variables, Vector< int > * N_own_variables, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *\n"
		""},
	 { "proximalGraph", _wrap_proximalGraph, METH_VARARGS, "\n"
		"proximalGraph(Matrix< double > * alpha0, Matrix< double > * alpha, Vector< double > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, double lambda1, double lambda2, double lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< double >\n"
		"proximalGraph(Matrix< float > * alpha0, Matrix< float > * alpha, Vector< float > * eta_g, SpMatrix< bool > * groups, SpMatrix< bool > * groups_var, int num_threads, float lambda1, float lambda2, float lambda3, bool intercept, bool resetflow, char * name_regul, bool verbose, bool pos, bool clever, bool eval, int size_group, bool transpose) -> Vector< float > *\n"
		""},
	 { "simpleGroupTree", _wrap_simpleGroupTree, METH_O, "simpleGroupTree(int * degr) -> std::vector< StructNodeElem< double > * > *"},
	 { "readGroupStruct", _wrap_readGroupStruct, METH_O, "readGroupStruct(char const * file) -> std::vector< StructNodeElem< double > * > *"},
	 { "groupStructOfString", _wrap_groupStructOfString, METH_O, "groupStructOfString(char const * data) -> std::vector< StructNodeElem< double > * > *"},
	 { "graphOfGroupStruct", _wrap_graphOfGroupStruct, METH_VARARGS, "\n"
		"graphOfGroupStruct(std::vector< StructNodeElem< double > * > * gstruct) -> Vector< double >\n"
		"graphOfGroupStruct(std::vector< StructNodeElem< float > * > * gstruct) -> Vector< float > *\n"
		""},
	 { "treeOfGroupStruct", _wrap_treeOfGroupStruct, METH_VARARGS, "\n"
		"treeOfGroupStruct(std::vector< StructNodeElem< double > * > * gstruct) -> int\n"
		"treeOfGroupStruct(std::vector< StructNodeElem< float > * > * gstruct, Vector< float > ** peta_g) -> int\n"
		""},
	 { "im2col_sliding", _wrap_im2col_sliding, METH_VARARGS, "\n"
		"im2col_sliding(Matrix< double > * A, Matrix< double > * B, int m, int n, bool RGB)\n"
		"im2col_sliding(Matrix< float > * A, Matrix< float > * B, int m, int n, bool RGB)\n"
		""},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SpMatrixT_bool_t = {"_p_p_SpMatrixT_bool_t", "SpMatrix< bool > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SpMatrixT_double_t = {"_p_p_SpMatrixT_double_t", "SpMatrix< double > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SpMatrixT_float_t = {"_p_p_SpMatrixT_float_t", "SpMatrix< float > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_VectorT_float_t = {"_p_p_VectorT_float_t", "Vector< float > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string = {"_p_string", "string *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_SwigPyObject,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_p_SpMatrixT_bool_t,
  &_swigt__p_p_SpMatrixT_double_t,
  &_swigt__p_p_SpMatrixT_float_t,
  &_swigt__p_p_VectorT_float_t,
  &_swigt__p_p_int,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_string,
};

static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SpMatrixT_bool_t[] = {  {&_swigt__p_p_SpMatrixT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SpMatrixT_double_t[] = {  {&_swigt__p_p_SpMatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SpMatrixT_float_t[] = {  {&_swigt__p_p_SpMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_VectorT_float_t[] = {  {&_swigt__p_p_VectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string[] = {  {&_swigt__p_string, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_SwigPyObject,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_p_SpMatrixT_bool_t,
  _swigc__p_p_SpMatrixT_double_t,
  _swigc__p_p_SpMatrixT_float_t,
  _swigc__p_p_VectorT_float_t,
  _swigc__p_p_int,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_string,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "L1COEFFS",SWIG_From_int(static_cast< int >(L1COEFFS)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "L2ERROR",SWIG_From_int(static_cast< int >(L2ERROR)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PENALTY",SWIG_From_int(static_cast< int >(PENALTY)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "SPARSITY",SWIG_From_int(static_cast< int >(SPARSITY)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "L2ERROR2",SWIG_From_int(static_cast< int >(L2ERROR2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PENALTY2",SWIG_From_int(static_cast< int >(PENALTY2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "FISTAMODE",SWIG_From_int(static_cast< int >(FISTAMODE)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "L2",SWIG_From_int(static_cast< int >(L2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "L1L2",SWIG_From_int(static_cast< int >(L1L2)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "L1L2FL",SWIG_From_int(static_cast< int >(L1L2FL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "L1L2MU",SWIG_From_int(static_cast< int >(L1L2MU)));
  
  /* Initialize threading */
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

